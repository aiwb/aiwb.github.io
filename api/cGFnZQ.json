{"per_page":10,"total":9,"current":1,"data":[{"title":"docs-javascript-MDN-web-api-2019-11-24-MutationObserver","date":"2020-04-15T21:36:20.855Z","excerpt":"","link":"docs-javascript-MDN-web-api-2019-11-24-MutationObserver"},{"title":"Node","date":"2019-11-24T13:11:53.000Z","excerpt":"","link":"docs-javascript-MDN-web-api-2019-11-24-Node"},{"title":"node.js 自然语言处理","date":"2019-11-24T12:36:46.000Z","excerpt":"","link":"natural-language-processing-for-node-js"},{"title":"使用服务对象访问集群中的应用","date":"2019-11-19T05:12:24.000Z","excerpt":"<p>这篇文章介绍怎么通过服务对象访问集群中的应用。service 给集群中的应用的两个实例提供了负载均衡的功能。</p>\n<h2 id=\"文章目标\">文章目标<a href=\"use-service-access-application-in-cluster#文章目标\"></a></h2><ul>\n<li>运行 Hello World 应用的两个实例</li>\n<li>创建服务对象暴露节点端口</li>\n<li>使用服务对象访问应用</li>\n</ul>\n<h2 id=\"开始之前\">开始之前<a href=\"use-service-access-application-in-cluster#开始之前\"></a></h2><p>开始之前需要有一个 <code>Kubernetes</code> 集群，和 <code>kubectl</code> 命令指向你要操作的集群。如果你还没集群，可以参考前面一篇文章安装 <code>Minikube</code>, 创建本地测试集群。或者可以使用下面这些在线的测试环境。</p>\n<ul>\n<li><a href=\"https://www.katacoda.com/courses/kubernetes/playground\" target=\"_blank\" rel=\"noopener\">katacoda</a></li>\n<li><a href=\"http://labs.play-with-k8s.com/\" target=\"_blank\" rel=\"noopener\">Play with Kubernetes</a></li>\n</ul>","link":"use-service-access-application-in-cluster","categories":["运维"]},{"title":"minikube 介绍","date":"2019-11-19T04:20:05.000Z","excerpt":"<p>minikube 是一个用来在个人电脑的虚拟机上运行单节点 Kubernetes 集群的工具。</p>\n<h2 id=\"安装前准备\">安装前准备<a href=\"minikube-introduce#安装前准备\"></a></h2><h3 id=\"一\">一<a href=\"minikube-introduce#一\"></a></h3><p>先要确认电脑是否支持 minikube 需要的虚拟机化技术。mac 电脑的话执行</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -a | grep -E --color <span class=\"string\">'machdep.cpu.features|VMX'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果返回值中包含高亮的 <code>VMX</code> 值，说明系统是支持的。</p>","link":"minikube-introduce","tags":["docker","kubectl","minikube"],"categories":["运维"]},{"title":"威联通使用: docker registry 设置","date":"2019-11-15T02:06:27.000Z","excerpt":"<p>威联通 Container Station 里的 Registry 设置不生效，不知道做这么个界面的意义是什么。</p>\n<p>只能试试 ssh 连上 nas，看看通过文件配置。</p>\n<p>连上 nas 后，执行 <code>which docker</code> 命令，查看 docker 的安装路径</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> docker</span><br><span class=\"line\">/share/CACHEDEV1_DATA/.qpkg/container-station/bin/docker</span><br></pre></td></tr></table></div></figure>","link":"qnap-docker-registry-setting","categories":["私服"]},{"title":"jupyter 安装","date":"2019-11-11T10:43:34.000Z","excerpt":"<h2 id=\"首先安装-miniconda\">首先安装 miniconda<a href=\"jupyter-installation#首先安装-miniconda\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install miniconda</span><br></pre></td></tr></table></div></figure>\n\n<p>查看安装说明</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask info miniconda</span><br></pre></td></tr></table></div></figure>\n\n<p>文档里告诉我们要执行下面的命令进行 shell 的配置</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda init <span class=\"string\">\"<span class=\"variable\">$(basename \"$&#123;SHELL&#125;\")</span>\"</span></span><br></pre></td></tr></table></div></figure>","link":"jupyter-installation","categories":["私服"]},{"title":"Window","date":"2019-11-08T06:16:51.000Z","excerpt":"","link":"docs-javascript-MDN-web-api-2019-11-08-Window"},{"title":"History","date":"2019-11-04T02:14:22.000Z","excerpt":"<h2 id=\"属性\">属性<a href=\"docs-javascript-MDN-web-api-2019-11-04-History#属性\"></a></h2><p>History.length <code>只读</code></p>\n<pre><code>返回整数，表示历史记录数量，包括当前页面</code></pre><p>History.scrollRestoration <code>实验</code></p>\n<pre><code>允许Web应用程序在历史导航上显式地设置默认滚动恢复行为。此属性可以是自动的（auto）或者手动的（manual）。</code></pre><p>History.state <code>只读</code></p>\n<pre><code>返回一个表示历史堆栈顶部的状态的值。这是一种可以不必等待popstate 事件而查看状态而的方式。</code></pre>","link":"docs-javascript-MDN-web-api-2019-11-04-History"},{"title":"electron 从一到二","date":"2019-11-01T07:49:01.000Z","excerpt":"<h2 id=\"〇、介绍\">〇、介绍<a href=\"electron-从一到二#〇、介绍\"></a></h2><p>上一节介绍了 electron 的基础使用，介绍的比较简单，照着文章一步步基本可以打出一个简单的原型项目啦。</p>\n<p>这篇文章介绍一下 electron IM 应用开发中要考虑的一些问题。</p>\n<p>本文主要包括：</p>\n<ol>\n<li>消息加密解密</li>\n<li>消息序列化</li>\n<li>网络传输协议</li>\n<li>私有数据通信协议</li>\n<li>多进程优化</li>\n<li>消息本地存储</li>\n<li>新消息 tray 图标闪烁</li>\n<li>项目自动更新</li>\n<li>进程间通信</li>\n<li>其他</li>\n</ol>","link":"electron-从一到二","tags":["electron","im","node-gyp","protocol-buffer"]}]}