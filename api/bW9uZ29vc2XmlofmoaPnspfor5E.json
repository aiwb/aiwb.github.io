{"title":"mongoose 文档粗译","date":"2014-09-27T16:24:00.000Z","link":"mongoose文档粗译","comments":true,"tags":["database"],"categories":["代码"],"updated":"2020-04-15T21:36:20.851Z","content":"<p>最近公司项目用到 nodejs, 和 mongodb.</p>\n<p>选用了 mongoose 这个类库，项目里其他几个人嫌看英文文档累，为了方便他们看，笔者边看就边翻译了一下。</p>\n<p>当然也查看了社区是否已经翻译过这些文档，以避免不必要的浪费，<br>不过看了社区的一些版本后发现也都不怎么完整，所以重新翻译了一下。</p>\n<p>mongoose.model(‘Project’, ProjectSchema);<br>var Project = mongoose.model(‘Project’);<br>// ready to go!</p>\n<p>上面代码可以合并成一行，返回的就是 model 对象。<br>下面进行的实例化，如果添加了方法，实例化后就带有对应的方法<br>比较类似原型继承<br>var Project = mongoose.model(‘Project’, ProjectSchema);</p>\n<p>可以为模型添加方法<br>注意不要覆写了 mongoose 提供的默认方法，覆写后可能会出现不可预见的错误，俗称坑<br>@example<br>Project.methods.findSimilarTypes = function(cb) {<br>     return this.model(‘Animal’).find({ type: this.type}, cb);<br>}</p>\n<p>在模型上添加静态方法的方式也比较类似<br>@example<br>animalSchema.statics.findByName = function (name, cb) {<br>     this.find({ name: new RegExp(name, ‘i’) }, cb);<br>}<br>实例化后用同样地方式调用</p>\n<p>建立二级 索引<br>var animalSchema = new Schema({<br>    name: String,<br>    type: String,<br>    tags: { type: [String], index: true } // field level<br>});</p>\n<p>animalSchema.index({ name: 1, type: -1 }); // schema level</p>\n<p>在应用启动的时候，Mongoose会自动调用ensureIndex方法对各个schema，这样对开发而言比较友好<br>但是在声场环境的话可以把这个功能关闭掉，因为创建索引会引起明显的性能问题，<br>关闭的方法如下<br>@example<br>animalSchema.set(‘autoIndex’, false);<br>or<br>new Schema({..}, { autoIndex: false });</p>\n<p>虚拟字段，在 mongoose 中用于便于字段的的格式化和合并，它不会被存到数据库中<br>比如在处理姓和名的情况下，要是希望快速调用姓和名合并在一起的姓名字段，就可以使用这个特性</p>\n<p>personSchema.virtual(‘name.full’).get(function () {<br>    return this.name.first + ‘ ‘ + this.name.last;<br>});</p>\n<p>定义模型的时候可以传一些参数<br>new Schema({..}, options);</p>\n<p>or</p>\n<p>var schema = new Schema({..});<br>schema.set(option, value);</p>\n<p>参数：bufferCommands<br>当运行mongo 的设备的自动重连功能被关闭，只连接一台mongo服务器，如果和服务器的连接断开，<br>就会触发 mongoose的bufferCommands直到重新连上mongo，要关闭这个功能的话给这个参数传个 false</p>\n<p>option: collection<br>可以调整 collection的名称</p>\n<p>option: id 是否开启 uuid 的 _id 字段自动转成 id 字段的功能。<br>// default behavior<br>var schema = new Schema({ name: String });<br>var Page = mongoose.model(‘Page’, schema);<br>var p = new Page({ name: ‘mongodb.org’ });<br>console.log(p.id); // ‘50341373e894ad16347efe01’</p>\n<p>// disabled id<br>var schema = new Schema({ name: String }, { id: false });<br>var Page = mongoose.model(‘Page’, schema);<br>var p = new Page({ name: ‘mongodb.org’ });<br>console.log(p.id); // undefined</p>\n<p>参数 option: _id</p>\n","prev":{"title":"mongoose 文档粗译","link":"mongoose"},"next":{"title":"nodejs-note","link":"nodejs-note"},"plink":"https://wuwb.github.io/mongoose文档粗译/","reward":true,"copyright":{"author":"吴文斌","link":"<a href=\"https://wuwb.github.io/mongoose文档粗译/\" title=\"mongoose 文档粗译\">https://wuwb.github.io/mongoose文档粗译/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-nd/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}