<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴文斌的博客</title>
  
  <subtitle>前后左右端开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wuwb.github.io/"/>
  <updated>2020-04-15T21:36:20.855Z</updated>
  <id>https://wuwb.github.io/</id>
  
  <author>
    <name>吴文斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docs-javascript-MDN-web-api-2019-11-24-MutationObserver</title>
    <link href="https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-24-MutationObserver.html"/>
    <id>https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-24-MutationObserver.html</id>
    <published>2020-04-15T21:36:20.855Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考">参考<a href="docs-javascript-MDN-web-api-2019-11-24-MutationObserver#参考"></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考&quot;&gt;参考&lt;a href=&quot;docs-javascript-MDN-web-api-2019-11-24-MutationObserver#参考&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Node</title>
    <link href="https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-24-Node.html"/>
    <id>https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-24-Node.html</id>
    <published>2019-11-24T13:11:53.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>Node 是一个接口，许多 DOM API 对象的类型会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如, 继承同一组方法，或者用同样的方式测试。</p><p>以下接口都从 Node 继承其方法和属性：</p><p>Document, Element, Attr, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction, DocumentFragment, DocumentType, Notation, Entity, EntityReference</p><p>在方法和属性不相关的特定情况下，这些接口可能返回 null。它们可能会抛出异常 - 例如，当将子节点添加到不允许子节点存在的节点时。</p><h2 id="属性">属性<a href="docs-javascript-MDN-web-api-2019-11-24-Node#属性"></a></h2><p>从父类型 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget" target="_blank" rel="noopener">EventTarget</a> 继承属性。</p><p>Node.baseURI <code>只读</code></p><pre><code>返回一个表示base URL的DOMString。不同语言中的base URL的概念都不一样。 在HTML中，base URL表示协议和域名，以及一直到最后一个&apos;/&apos;之前的文件目录。</code></pre><p>Node.baseURIObject</p><pre><code>(不适用于网页内容) 只读的 nsIURI 对象表示元素的base URI.</code></pre><p>Node.childNodes <code>只读</code></p><pre><code>返回一个包含了该节点所有子节点的实时的 NodeList。NodeList 是“实时的”意思是，如果该节点的子节点发生了变化，NodeList对象就会自动更新。</code></pre><p>Node.firstChild <code>只读</code></p><pre><code>返回该节点的第一个子节点Node，如果该节点没有子节点则返回null。</code></pre><p>Node.isConnected <code>只读</code></p><pre><code>返回一个布尔值用来检测该节点是否已连接(直接或者间接)到一个上下文对象上，比如通常DOM情况下的 Document 对象，或者在shadow DOM情况下的 ShadowRoot 对象。</code></pre><p>Node.lastChild <code>只读</code></p><pre><code>返回该节点的最后一个子节点Node，如果该节点没有子节点则返回 null。</code></pre><p>Node.nextSibling <code>只读</code></p><pre><code>返回与该节点同级的下一个节点 Node，如果没有返回 null。</code></pre><p>Node.nodeName <code>只读</code></p><pre><code>返回一个包含该节点名字的DOMString。节点的名字的结构和节点类型不同。比如HTMLElement的名字跟它所关联的标签对应，就比如HTMLAudioElement的就是 &apos;audio&apos; ，Text节点对应的是 &apos;#text&apos; 还有Document节点对应的是 &apos;#document&apos;。</code></pre><p>Node.nodeType只读<br>    返回一个与该节点类型对应的无符号短整型的值，可能的值如下：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name</span><span class="string">Value</span></span><br><span class="line"><span class="attr">ELEMENT_NODE</span><span class="string">1</span></span><br><span class="line"><span class="attr">ATTRIBUTE_NODE</span> <span class="string">2</span></span><br><span class="line"><span class="attr">TEXT_NODE</span><span class="string">3</span></span><br><span class="line"><span class="attr">CDATA_SECTION_NODE</span><span class="string">4</span></span><br><span class="line"><span class="attr">ENTITY_REFERENCE_NODE</span> <span class="string">5</span></span><br><span class="line"><span class="attr">ENTITY_NODE</span> <span class="string">6</span></span><br><span class="line"><span class="attr">PROCESSING_INSTRUCTION_NODE</span><span class="string">7</span></span><br><span class="line"><span class="attr">COMMENT_NODE</span><span class="string">8</span></span><br><span class="line"><span class="attr">DOCUMENT_NODE</span><span class="string">9</span></span><br><span class="line"><span class="attr">DOCUMENT_TYPE_NODE</span><span class="string">10</span></span><br><span class="line"><span class="attr">DOCUMENT_FRAGMENT_NODE</span><span class="string">11</span></span><br><span class="line"><span class="attr">NOTATION_NODE</span> <span class="string">12</span></span><br></pre></td></tr></table></div></figure><p>Node.nodeValue</p><pre><code>返回或设置当前节点的值。</code></pre><p>Node.ownerDocument 只读</p><pre><code>返回这个元素属于的 Document对象 。 如果没有Document对象与之关联，返回null。</code></pre><p>Node.parentNode 只读</p><pre><code>返回一个当前结点 Node的父节点 。如果没有这样的结点,，比如说像这个节点是树结构的顶端或者没有插入一棵树中， 这个属性返回null。</code></pre><p>Node.parentElement 只读</p><pre><code>返回一个当前节点的父节点 Element 。 如果当前节点没有父节点或者说父节点不是一个元素(Element), 这个属性返回null。</code></pre><p>Node.previousSibling 只读</p><pre><code>返回一个当前节点同辈的前一个结点( Node) ，或者返回null（如果不存在这样的一个节点的话）。</code></pre><p>Node.textContent</p><pre><code>返回或设置一个元素内所有子结点及其后代的文本内容。</code></pre><h2 id="废弃属性">废弃属性<a href="docs-javascript-MDN-web-api-2019-11-24-Node#废弃属性"></a></h2><p>废弃就不记录了</p><h2 id="方法">方法<a href="docs-javascript-MDN-web-api-2019-11-24-Node#方法"></a></h2><p>从其父类型 EventTarget 继承方法。</p><p>Node.appendChild()</p><pre><code>将指定的 childNode 参数作为最后一个子节点添加到当前节点。如果参数引用了 DOM 树上的现有节点，则节点将从当前位置分离，并附加到新位置。</code></pre><p>Node.cloneNode()</p><pre><code>克隆一个 Node，并且可以选择是否克隆这个节点下的所有内容。默认情况下，节点下的内容会被克隆。</code></pre><p>Node.compareDocumentPosition()</p><pre><code>比较当前节点与文档中的另一节点的位置。</code></pre><p>Node.contains()</p><pre><code>返回一个 Boolean 布尔值，来表示传入的节点是否为该节点的后代节点。</code></pre><p>Node.getRootNode()</p><pre><code>返回上下文对象的根结点。如果shadow root节点存在的话，也可以在返回的节点中包含它。</code></pre><p>Node.hasChildNodes()</p><pre><code>返回一个Boolean 布尔值，来表示该元素是否包含有子节点。</code></pre><p>Node.insertBefore()</p><pre><code>在当前节点下增加一个子节点 Node，并使该子节点位于参考节点的前面。</code></pre><p>Node.isDefaultNamespace()</p><pre><code>Accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.</code></pre><p>Node.isEqualNode()</p><pre><code>Returns a Boolean which indicates whether or not two nodes are of the same type and all their defining data points match.</code></pre><p>Node.isSameNode()</p><pre><code>Returns a Boolean value indicating whether or not the two nodes are the same (that is, they reference the same object).</code></pre><p>Node.lookupPrefix()</p><pre><code>Returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent.</code></pre><p>Node.lookupNamespaceURI()</p><pre><code>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace.</code></pre><p>Node.normalize()</p><pre><code>Clean up all the text nodes under this element (merge adjacent, remove empty).</code></pre><p>Node.removeChild()</p><pre><code>Removes a child node from the current element, which must be a child of the current node.</code></pre><p>Node.replaceChild()</p><pre><code>Replaces one child Node of the current one with the second one given in parameter.</code></pre><h2 id="废弃方法">废弃方法<a href="docs-javascript-MDN-web-api-2019-11-24-Node#废弃方法"></a></h2><p>废弃就不记录了</p><h2 id="参考">参考<a href="docs-javascript-MDN-web-api-2019-11-24-Node#参考"></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Node</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Node 是一个接口，许多 DOM API 对象的类型会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如, 继承同一组方法，或者用同样的方式测试。&lt;/p&gt;
&lt;p&gt;以下接口都从 Node 继承其方法和属性：&lt;/p&gt;
&lt;p&gt;Document, Element
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node.js 自然语言处理</title>
    <link href="https://wuwb.github.io/natural-language-processing-for-node-js.html"/>
    <id>https://wuwb.github.io/natural-language-processing-for-node-js.html</id>
    <published>2019-11-24T12:36:46.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍<a href="natural-language-processing-for-node-js#介绍"></a></h2><p>互联网创造了大量非结构化文本数据。幸运的是，我们有现代的系统可以理解这类数据。</p><p>现代计算机系统可以使用称为 NLP（natural language processing）的基础技术来理解自然语言。 该技术可以将人类语言作为输入进行处理，并执行以下一项或多项操作：</p><ul><li>情绪分析（是肯定还是否定的陈述？）</li><li>主题分类（关于什么？）</li><li>根据此声明确定应采取的措施</li><li>意图提取（此语句的意图是什么？</li></ul><p>NLP 是语言学、计算机科学、信息工程和与计算机和人类自然语言之间的相互作用有关的人工智能，特别是如何对计算机进行编程以处理和分析大量自然语言数据。</p><p>由于我们的大多数设备都集成了AI（人工智能），ML（机器学习）和NLP以增强人机交互，因此，如今NLP的重要实现离我们也并不遥远。 以下是NLP运作中的一些常见示例：</p><ul><li>搜索引擎：Google搜索引擎是最有用的技术之一。您输入文字并收到数百万个相关结果作为响应。由于NLP技术可以理解输入并执行一系列逻辑运算，因此这是可能的。这也是让Google搜索了解您的意图并在您拼写错误的搜索词时向您建议正确拼写的原因。</li><li>智能虚拟助手：Siri，Alexa和Google Assistant等虚拟助手显示了NLP实施的高级水平。在收到您的口头输入后，他们可以识别意图，执行操作并以自然语言发送回覆。</li><li>智能聊天机器人：聊天机器人可以分析大量文本数据，并根据大数据及其检测意图的能力给出不同的响应。这给人一种自然对话的整体感觉，而不是一台机器。</li><li>垃圾邮件过滤器：您是否注意到电子邮件客户端在将垃圾邮件从收件箱中过滤出来方面不断地变得越来越好？之所以可以这样做，是因为过滤器引擎可以理解电子邮件的内容（主要使用贝叶斯垃圾邮件过滤功能），并确定是否为垃圾邮件。</li></ul><p>上面的用例表明，AI，ML和NLP已在网络上大量使用。 由于人类使用自然语言与网站进行交互，因此我们应该使用NLP功能来构建我们的网站。</p><p>当主题为NLP（或ML和AI）时，Python通常是首选语言，这是因为Python拥有丰富的语言处理包，例如Natural Language Toolkit。 但是，JavaScript迅速发展，并且NPM的存在为其开发人员提供了访问大量程序包的权限，其中包括用于执行不同语言的NLP的程序包。</p><p>在本文中，我们将重点介绍使用Node的NLP入门。 我们将使用一个称为natural的JavaScript库。 通过将自然库添加到我们的项目中，我们的代码将能够从用户输入中解析，解释，操纵和理解自然语言。</p><p>本文几乎不会涉及NLP的表面。 这篇文章对于已经在Python中使用NLP但希望过渡到Node来获得相同结果的开发人员而言非常有用。 完全的新手还将学到很多关于NLP作为一项技术及其在Node中的用法的知识。</p><h2 id="预备">预备<a href="natural-language-processing-for-node-js#预备"></a></h2><ul><li>Node.js 基础知识</li><li>可以运行 Node 代码的系统</li></ul><h2 id="安装">安装<a href="natural-language-processing-for-node-js#安装"></a></h2><p>用下列命令安装 natural 包。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">natural</span></span><br></pre></td></tr></table></div></figure><p>下列示例的代码可以在<a href="https://github.com/Jordanirabor/nlp-node-natural-article" target="_blank" rel="noopener">github</a>免费获取。</p><h2 id="使用">使用<a href="natural-language-processing-for-node-js#使用"></a></h2><p>下面介绍如何使用 natural 执行一些基础但是重要的 NLP 任务。</p><h3 id="Tokenization">Tokenization<a href="natural-language-processing-for-node-js#Tokenization"></a></h3><p>Tokenization is the process of demarcating and possibly classifying sections of a string of input characters. The resulting tokens are then passed on to some other form of processing. The process can be considered a sub-task of parsing input.</p><p>For example, in the text string: The quick brown fox jumps over the lazy dog</p><p>The string isn’t implicitly segmented on spaces, as a natural language speaker would do. The raw input, the 43 characters, must be explicitly split into the 9 tokens with a given space delimiter (i.e., matching the string “ “ or regular expression /\s{1}/).</p><p>Natural ships with a number of smart tokenizer algorithms that can break text into arrays of tokens. Here’s a code snippet showing the usage of the Word tokenizer:</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> natural = require(<span class="string">'natural'</span>);</span><br><span class="line"><span class="keyword">var</span> tokenizer = <span class="keyword">new</span> <span class="type">natural</span>.WordTokenizer();</span><br></pre></td></tr></table></div></figure><p>console.log(tokenizer.tokenize(“The quick brown fox jumps over the lazy dog”));<br>Running this with Node gives the following output:</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="symbol">'The</span>',</span><br><span class="line">  <span class="symbol">'quick</span>',</span><br><span class="line">  <span class="symbol">'brown</span>',</span><br><span class="line">  <span class="symbol">'fox</span>',</span><br><span class="line">  <span class="symbol">'jumps</span>',</span><br><span class="line">  <span class="symbol">'over</span>',</span><br><span class="line">  <span class="symbol">'the</span>',</span><br><span class="line">  <span class="symbol">'lazy</span>',</span><br><span class="line">  <span class="symbol">'dog</span>' ]</span><br></pre></td></tr></table></div></figure><h3 id="Stemming">Stemming<a href="natural-language-processing-for-node-js#Stemming"></a></h3><p>Stemming refers to the reduction of words to their word stem (also known as base or root form). For example, words such as cats, catlike, and catty will be stemmed down to the root word — cat.</p><p>Natural currently supports two stemming algorithms — Porter and Lancaster (Paice/Husk). Here’s a code snippet implementing stemming, using the Porter algorithm:</p><p>// index.js</p><p>var natural = require(‘natural’);</p><p>natural.PorterStemmer.attach();<br>console.log(“I can see that we are going to be friends”.tokenizeAndStem());<br>This example uses the attach() method to patch stem() and tokenizeAndStem() to String as a shortcut to PorterStemmer.stem(token).tokenizeAndStem(). The result is the breaking down of the text into single words then an array of stemmed tokens will be returned:</p><p>[ ‘go’, ‘friend’ ]<br>Note: In the result above, stop words have been removed by the algorithm. Stop words are words that are filtered out before the processing of natural language(for example be, an, and to are all stop words).</p><p>Measuring the similarity between words (string distance)<br>Natural provides an implementation of four algorithms for calculating string distance, Hamming distance, Jaro-Winkler, Levenshtein distance, and Dice coefficient. Using these algorithms, we can tell if two strings match or not. For the sake of this project we will be using Hamming distance.</p><p>Hamming distance measures the distance between two strings of equal length by counting the number of different characters. The third parameter indicates whether the case should be ignored. By default, the algorithm is case sensitive.</p><p>Here’s a code snippet showing the usage of the Hemming algorithm for calculating string distance:</p><p>// index.js</p><p>var natural = require(‘natural’);</p><p>console.log(natural.HammingDistance(“karolin”, “kathrin”, false));<br>console.log(natural.HammingDistance(“karolin”, “kerstin”, false));<br>console.log(natural.HammingDistance(“short string”, “longer string”, false));<br>The output:</p><p>3<br>3<br>-1</p><p>The first two comparisons return 3 because three letters differ. The last one returns -1 because the lengths of the strings being compared are different.</p><h3 id="分类">分类<a href="natural-language-processing-for-node-js#分类"></a></h3><p>Text classification also known as text tagging is the process of classifying text into organized groups. That is, if we have a new unknown statement, our processing system can decide which category it fits in the most based on its content.</p><p>Some of the most common use cases for automatic text classification include the following:</p><p>Sentiment analysis</p><p>Topic detection<br>Language detection<br>Natural currently supports two classifiers — Naive Bayes and logistic regression. The following examples use the BayesClassifier class:</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var natural = require('natural');</span><br><span class="line"></span><br><span class="line">var classifier = <span class="keyword">new</span> natural.<span class="constructor">BayesClassifier()</span>;</span><br><span class="line">classifier.add<span class="constructor">Document('<span class="params">i</span> <span class="params">am</span> <span class="params">long</span> <span class="params">qqqq</span>', '<span class="params">buy</span>')</span>;</span><br><span class="line">classifier.add<span class="constructor">Document('<span class="params">buy</span> <span class="params">the</span> <span class="params">q</span>\'<span class="params">s</span>', '<span class="params">buy</span>')</span>;</span><br><span class="line">classifier.add<span class="constructor">Document('<span class="params">short</span> <span class="params">gold</span>', '<span class="params">sell</span>')</span>;</span><br><span class="line">classifier.add<span class="constructor">Document('<span class="params">sell</span> <span class="params">gold</span>', '<span class="params">sell</span>')</span>;</span><br><span class="line">classifier.train<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">console.log(classifier.classify('i am short silver'));</span><br><span class="line">console.log(classifier.classify('i am long copper'));</span><br></pre></td></tr></table></div></figure><p>In the code above, we trained the classifier on sample text. It will use reasonable defaults to tokenize and stem the text. Based on the sample text, the console will log the following output:</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sell</span></span><br><span class="line"><span class="keyword">buy</span></span><br></pre></td></tr></table></div></figure><h3 id="Sentiment-analysis">Sentiment analysis<a href="natural-language-processing-for-node-js#Sentiment-analysis"></a></h3><p>Sentiment analysis (also known as opinion mining or emotion AI) refers to the use of natural language processing, text analysis, computational linguistics, and biometrics to systematically identify, extract, quantify, and study affective states and subjective information. Sentiment analysis is widely applied to voice of the customer materials such as reviews and survey responses, online and social media, and healthcare materials for applications that range from marketing to customer service to clinical medicine.</p><p>Natural supports algorithms that can calculate the sentiment of each piece of text by summing the polarity of each word and normalizing it with the length of the sentence. If a negation occurs the result is made negative.</p><p>Here’s an example of its usage:</p><p>// index.js</p><p>var natural = require(‘natural’);<br>var Analyzer = natural.SentimentAnalyzer;<br>var stemmer = natural.PorterStemmer;<br>var analyzer = new Analyzer(“English”, stemmer, “afinn”);</p><p>// getSentiment expects an array of strings<br>console.log(analyzer.getSentiment([“I”, “don’t”, “want”, “to”, “play”, “with”, “you”]));<br>The constructor has three parameters:</p><p>Language<br>Stemmer- to increase the coverage of the sentiment analyzer a stemmer may be provided<br>Vocabulary- sets the type of vocabulary, “afinn”, “senticon” or “pattern” are valid values<br>Running the code above gives the following output:</p><p>0.42857142857142855 // indicates a relatively negative statement<br>Phonetic matching<br>Using natural, we can compare two words that are spelled differently but sound similar using phonetic matching. Here’s an example using the metaphone.compare() method:</p><p>// index.js</p><p>var natural = require(‘natural’);<br>var metaphone = natural.Metaphone;<br>var soundEx = natural.SoundEx;</p><p>var wordA = ‘phonetics’;<br>var wordB = ‘fonetix’;</p><p>if (metaphone.compare(wordA, wordB))<br>    console.log(‘They sound alike!’);</p><p>// We can also obtain the raw phonetics of a word using process()<br>console.log(metaphone.process(‘phonetics’));<br>We also obtained the raw phonetics of a word using process(). We get the following output when we run the code above:</p><p>They sound alike!<br>FNTKS<br>Spell check<br>Users may make typographical errors when supplying input to a web application through a search bar or an input field. Natural has a probabilistic spellchecker that can suggest corrections for misspelled words using an array of tokens from a text corpus.</p><p>Let’s explore an example using an array of two words (also known as a corpus) for simplicity:</p><p>// index.js</p><p>var natural = require(‘natural’);</p><p>var corpus = [‘something’, ‘soothing’];<br>var spellcheck = new natural.Spellcheck(corpus);</p><p>console.log(spellcheck.getCorrections(‘soemthing’, 1));<br>console.log(spellcheck.getCorrections(‘soemthing’, 2));<br>It suggests corrections (sorted by probability in descending order) that are up to a maximum edit distance away from the input word. A maximum distance of 1 will cover 80% to 95% of spelling mistakes. After a distance of 2, it becomes very slow.</p><p>We get the following output from running the code:</p><p>[ ‘something’ ]<br>[ ‘something’, ‘soothing’ ]<br>Conclusion<br>Here’s a quick summary of what we’ve learned so far in this article:</p><p>Computer systems are getting smarter by the day and can extract meaning from large volumes of unstructured textual data using NLP<br>Python has a wealth of intelligent packages for performing AI, ML, and NLP tasks but JavaScript is growing really rapidly and its package manager has an impressive number of packages capable of processing natural language<br>Natural, a JavaScript package, is robust in performing NLP operations and has a number of algorithm alternatives for each task<br>The source code to each of the following usage examples in the next section is available on Github. Feel free to clone it, fork it or submit an issue.</p><h2 id="其他">其他<a href="natural-language-processing-for-node-js#其他"></a></h2><p>Find more information on this topic via the following links:</p><p>What is Natural Language Processing and why it matters<br>AI basics- Natural Language Processing with Node<br>Natural Language Processing and Machine Learning in JavaScript<br>What is Text Classification?</p><h2 id="参考">参考<a href="natural-language-processing-for-node-js#参考"></a></h2><ul><li><a href="https://blog.logrocket.com/natural-language-processing-for-node-js/" target="_blank" rel="noopener">https://blog.logrocket.com/natural-language-processing-for-node-js/</a></li><li><a href="https://github.com/Jordanirabor/nlp-node-natural-article" target="_blank" rel="noopener">https://github.com/Jordanirabor/nlp-node-natural-article</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;a href=&quot;natural-language-processing-for-node-js#介绍&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;互联网创造了大量非结构化文本数据。幸运的是，我们有现代的系统可以理解这类数据。&lt;/p&gt;
&lt;p&gt;现代计算机系统可以使用称为 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用服务对象访问集群中的应用</title>
    <link href="https://wuwb.github.io/use-service-access-application-in-cluster.html"/>
    <id>https://wuwb.github.io/use-service-access-application-in-cluster.html</id>
    <published>2019-11-19T05:12:24.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章介绍怎么通过服务对象访问集群中的应用。service 给集群中的应用的两个实例提供了负载均衡的功能。</p><h2 id="文章目标">文章目标<a href="use-service-access-application-in-cluster#文章目标"></a></h2><ul><li>运行 Hello World 应用的两个实例</li><li>创建服务对象暴露节点端口</li><li>使用服务对象访问应用</li></ul><h2 id="开始之前">开始之前<a href="use-service-access-application-in-cluster#开始之前"></a></h2><p>开始之前需要有一个 <code>Kubernetes</code> 集群，和 <code>kubectl</code> 命令指向你要操作的集群。如果你还没集群，可以参考前面一篇文章安装 <code>Minikube</code>, 创建本地测试集群。或者可以使用下面这些在线的测试环境。</p><ul><li><a href="https://www.katacoda.com/courses/kubernetes/playground" target="_blank" rel="noopener">katacoda</a></li><li><a href="http://labs.play-with-k8s.com/" target="_blank" rel="noopener">Play with Kubernetes</a></li></ul><a id="more"></a><h2 id="为运行在两个-pod-里的应用创建服务">为运行在两个 pod 里的应用创建服务<a href="use-service-access-application-in-cluster#为运行在两个-pod-里的应用创建服务"></a></h2><p>下面是一个用来创建应用发布的配置文件。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">load-balancer-example</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">load-balancer-example</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">gcr.io/google-samples/node-hello:1.0</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></div></figure><p>通过下面的命令在你的集群中创建应用，如果懒得本地创建这个配置文件，可以直接使用线上连接。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f .<span class="regexp">/path/</span>to<span class="regexp">/your/</span>file/hello-application.yaml</span><br><span class="line">kubectl apply -f <span class="string">https:</span><span class="comment">//k8s.io/examples/service/access/hello-application.yaml</span></span><br></pre></td></tr></table></div></figure><p>上述的命令，创建了一个发布对象，和一个关联的副本集对象。副本集对象用用两个 pod，每个 pod 中运行着一个 hello world 应用实例。</p><h3 id="查看一下创建的发布对象">查看一下创建的发布对象<a href="use-service-access-application-in-cluster#查看一下创建的发布对象"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> deployments hello-world</span><br><span class="line">kubectl <span class="built_in">describe</span> deployments hello-world</span><br></pre></td></tr></table></div></figure><h3 id="查看一下创建的副本集对象">查看一下创建的副本集对象<a href="use-service-access-application-in-cluster#查看一下创建的副本集对象"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> replicasets</span><br><span class="line">kubectl <span class="built_in">describe</span> replicasets</span><br></pre></td></tr></table></div></figure><h3 id="创建暴露发布的服务对象">创建暴露发布的服务对象<a href="use-service-access-application-in-cluster#创建暴露发布的服务对象"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment hello-world <span class="attribute">--type</span>=NodePort <span class="attribute">--name</span>=example-service</span><br></pre></td></tr></table></div></figure><h3 id="查看一下创建的服务对象">查看一下创建的服务对象<a href="use-service-access-application-in-cluster#查看一下创建的服务对象"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">describe</span> services <span class="built_in">example</span>-service</span><br></pre></td></tr></table></div></figure><p>输出如下：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Name:</span>                   example-service</span><br><span class="line"><span class="symbol">Namespace:</span>              default</span><br><span class="line"><span class="symbol">Labels:</span>                 run=load-balancer-example</span><br><span class="line"><span class="symbol">Annotations:</span>            <span class="params">&lt;none&gt;</span></span><br><span class="line"><span class="symbol">Selector:</span>               run=load-balancer-example</span><br><span class="line"><span class="symbol">Type:</span>                   NodePort</span><br><span class="line"><span class="symbol">IP:</span>                     <span class="number">10.32</span><span class="number">.0</span><span class="number">.16</span></span><br><span class="line"><span class="symbol">Port:</span>                   <span class="params">&lt;unset&gt;</span> <span class="number">8080</span>/TCP</span><br><span class="line"><span class="symbol">TargetPort:</span>             <span class="number">8080</span>/TCP</span><br><span class="line"><span class="symbol">NodePort:</span>               <span class="params">&lt;unset&gt;</span> <span class="number">31496</span>/TCP</span><br><span class="line"><span class="symbol">Endpoints:</span>              <span class="number">10.200</span><span class="number">.1</span><span class="number">.4</span>:<span class="number">8080</span>,<span class="number">10.200</span><span class="number">.2</span><span class="number">.5</span>:<span class="number">8080</span></span><br><span class="line">Session Affinity:       None</span><br><span class="line"><span class="symbol">Events:</span>                 <span class="params">&lt;none&gt;</span></span><br></pre></td></tr></table></div></figure><p>记录一下输出中的 NodePort 端口号</p><h3 id="查看一下运行着-hello-world-应用-pod">查看一下运行着 hello world 应用 pod<a href="use-service-access-application-in-cluster#查看一下运行着-hello-world-应用-pod"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods <span class="attribute">--selector</span>=<span class="string">"run=load-balancer-example"</span> <span class="attribute">--output</span>=wide</span><br></pre></td></tr></table></div></figure><h3 id="获取公共-ip-地址">获取公共 ip 地址<a href="use-service-access-application-in-cluster#获取公共-ip-地址"></a></h3><p>这个获取方式和你使用的集群有关，如果是 minikube 集群，可以使用</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl</span> cluster-<span class="literal">info</span></span><br></pre></td></tr></table></div></figure><p>命令获取。如果是 Google Compute Engine, 可以使用</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute instances <span class="built_in">list</span></span><br></pre></td></tr></table></div></figure><h3 id="创建防火墙规则，允许到公共-ip-的-tcp-请求">创建防火墙规则，允许到公共 ip 的 tcp 请求<a href="use-service-access-application-in-cluster#创建防火墙规则，允许到公共-ip-的-tcp-请求"></a></h3><h3 id="使用公共-ip-和-NodePort-端口访问应用">使用公共 ip 和 NodePort 端口访问应用<a href="use-service-access-application-in-cluster#使用公共-ip-和-NodePort-端口访问应用"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://<span class="tag">&lt;<span class="name">public-node-ip</span>&gt;</span>:<span class="tag">&lt;<span class="name">node-port</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>看到结果</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Kubernetes!</span><br></pre></td></tr></table></div></figure><h2 id="使用配置文件">使用配置文件<a href="use-service-access-application-in-cluster#使用配置文件"></a></h2><p>上面描述了如果通过命令 <code>kubectl expose</code> 创建服务对象。我们还可以通过配置文件创建服务对象。</p><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">见下一篇文章</a></p><h2 id="清理测试环境">清理测试环境<a href="use-service-access-application-in-cluster#清理测试环境"></a></h2><p>删除服务对象</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">delete</span> services <span class="built_in">example</span>-service</span><br></pre></td></tr></table></div></figure><p>删除发布对象，副本集对象和运行着应用的 pods</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> deployment hello-world</span><br></pre></td></tr></table></div></figure><h2 id="参考">参考<a href="use-service-access-application-in-cluster#参考"></a></h2><ul><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章介绍怎么通过服务对象访问集群中的应用。service 给集群中的应用的两个实例提供了负载均衡的功能。&lt;/p&gt;
&lt;h2 id=&quot;文章目标&quot;&gt;文章目标&lt;a href=&quot;use-service-access-application-in-cluster#文章目标&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;运行 Hello World 应用的两个实例&lt;/li&gt;
&lt;li&gt;创建服务对象暴露节点端口&lt;/li&gt;
&lt;li&gt;使用服务对象访问应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开始之前&quot;&gt;开始之前&lt;a href=&quot;use-service-access-application-in-cluster#开始之前&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;开始之前需要有一个 &lt;code&gt;Kubernetes&lt;/code&gt; 集群，和 &lt;code&gt;kubectl&lt;/code&gt; 命令指向你要操作的集群。如果你还没集群，可以参考前面一篇文章安装 &lt;code&gt;Minikube&lt;/code&gt;, 创建本地测试集群。或者可以使用下面这些在线的测试环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.katacoda.com/courses/kubernetes/playground&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;katacoda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://labs.play-with-k8s.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Play with Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://wuwb.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>minikube 介绍</title>
    <link href="https://wuwb.github.io/minikube-introduce.html"/>
    <id>https://wuwb.github.io/minikube-introduce.html</id>
    <published>2019-11-19T04:20:05.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>minikube 是一个用来在个人电脑的虚拟机上运行单节点 Kubernetes 集群的工具。</p><h2 id="安装前准备">安装前准备<a href="minikube-introduce#安装前准备"></a></h2><h3 id="一">一<a href="minikube-introduce#一"></a></h3><p>先要确认电脑是否支持 minikube 需要的虚拟机化技术。mac 电脑的话执行</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a | grep -E --color <span class="string">'machdep.cpu.features|VMX'</span></span><br></pre></td></tr></table></div></figure><p>如果返回值中包含高亮的 <code>VMX</code> 值，说明系统是支持的。</p><a id="more"></a><h3 id="二">二<a href="minikube-introduce#二"></a></h3><p>要确认电脑上已经安装 <code>kubectl</code>, 这个工具安装 docker for desktop 后就有了。</p><h3 id="三">三<a href="minikube-introduce#三"></a></h3><p>安装一个虚拟层管理工具。可以是下面三个之一。</p><ul><li>HyperKit</li><li>VirtualBox</li><li>VMware Fusion</li></ul><p>HyperKit 在安装 docker for desktop 后就有了。</p><h2 id="安装">安装<a href="minikube-introduce#安装"></a></h2><p>安装很简单，brew 安装就好了。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></table></div></figure><h2 id="清理本地环境">清理本地环境<a href="minikube-introduce#清理本地环境"></a></h2><p>如果原来安装过 minikube， 执行</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube <span class="literal">start</span></span><br></pre></td></tr></table></div></figure><p>命令的时候可能会报错,</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">machine <span class="keyword">does</span> <span class="keyword">not</span> exist</span><br></pre></td></tr></table></div></figure><p>这种情况下，执行</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube <span class="keyword">delete</span></span><br></pre></td></tr></table></div></figure><p>清理环境后重新执行 <code>minikube start</code> 启动集群。</p><h2 id="参考">参考<a href="minikube-introduce#参考"></a></h2><ul><li><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;minikube 是一个用来在个人电脑的虚拟机上运行单节点 Kubernetes 集群的工具。&lt;/p&gt;
&lt;h2 id=&quot;安装前准备&quot;&gt;安装前准备&lt;a href=&quot;minikube-introduce#安装前准备&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;一&quot;&gt;一&lt;a href=&quot;minikube-introduce#一&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;先要确认电脑是否支持 minikube 需要的虚拟机化技术。mac 电脑的话执行&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl -a | grep -E --color &lt;span class=&quot;string&quot;&gt;&#39;machdep.cpu.features|VMX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;如果返回值中包含高亮的 &lt;code&gt;VMX&lt;/code&gt; 值，说明系统是支持的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://wuwb.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="minikube" scheme="https://wuwb.github.io/tags/minikube/"/>
    
      <category term="kubectl" scheme="https://wuwb.github.io/tags/kubectl/"/>
    
      <category term="docker" scheme="https://wuwb.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>威联通使用: docker registry 设置</title>
    <link href="https://wuwb.github.io/qnap-docker-registry-setting.html"/>
    <id>https://wuwb.github.io/qnap-docker-registry-setting.html</id>
    <published>2019-11-15T02:06:27.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>威联通 Container Station 里的 Registry 设置不生效，不知道做这么个界面的意义是什么。</p><p>只能试试 ssh 连上 nas，看看通过文件配置。</p><p>连上 nas 后，执行 <code>which docker</code> 命令，查看 docker 的安装路径</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> docker</span><br><span class="line">/share/CACHEDEV1_DATA/.qpkg/container-station/bin/docker</span><br></pre></td></tr></table></div></figure><a id="more"></a><p>进到 <code>/share/CACHEDEV1_DATA/.qpkg/container-station</code> 目录，看到有 <code>etc</code> 子目录。</p><p>进 <code>etc</code> 子目录，看到 docker.json, 这应该就是 docker 配置文件了，在里面加上我们的加速源。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>再回到 <code>container-station</code> 目录，执行目录下的 <code>./container-station.sh restart</code> 命令对服务进行重启。</p><p>重启后源设置就生效了，愉快的玩耍吧。</p><h2 id="更新">更新<a href="qnap-docker-registry-setting#更新"></a></h2><p>nas 重启后配置失效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;威联通 Container Station 里的 Registry 设置不生效，不知道做这么个界面的意义是什么。&lt;/p&gt;
&lt;p&gt;只能试试 ssh 连上 nas，看看通过文件配置。&lt;/p&gt;
&lt;p&gt;连上 nas 后，执行 &lt;code&gt;which docker&lt;/code&gt; 命令，查看 docker 的安装路径&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/share/CACHEDEV1_DATA/.qpkg/container-station/bin/docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="私服" scheme="https://wuwb.github.io/categories/%E7%A7%81%E6%9C%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>jupyter 安装</title>
    <link href="https://wuwb.github.io/jupyter-installation.html"/>
    <id>https://wuwb.github.io/jupyter-installation.html</id>
    <published>2019-11-11T10:43:34.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先安装-miniconda">首先安装 miniconda<a href="jupyter-installation#首先安装-miniconda"></a></h2><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install miniconda</span><br></pre></td></tr></table></div></figure><p>查看安装说明</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask info miniconda</span><br></pre></td></tr></table></div></figure><p>文档里告诉我们要执行下面的命令进行 shell 的配置</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init <span class="string">"<span class="variable">$(basename "$&#123;SHELL&#125;")</span>"</span></span><br></pre></td></tr></table></div></figure><a id="more"></a><p>设置清华大学镜像源</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">config</span> <span class="comment">--add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">conda <span class="built_in">config</span> <span class="comment">--set show_channel_urls yes</span></span><br></pre></td></tr></table></div></figure><p>查看源修改是否生效</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">conda</span> <span class="literal">info</span></span><br></pre></td></tr></table></div></figure><p>如果已经安装 miniconda, 可以执行下面的命令进行升级</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></div></figure><h2 id="安装-jupyter">安装 jupyter<a href="jupyter-installation#安装-jupyter"></a></h2><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> jupyter</span><br></pre></td></tr></table></div></figure><p>生成 jupyter 默认配置文件</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></div></figure><p>启动</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></table></div></figure><p>打开后默认项目路径是执行启动命令所在文件夹，可以通过修改配置文件中 <code>c.NotebookApp.notebook_dir</code> 参数修改默认文件夹路径</p><p>需要远程访问的话，可以添加 <code>--ip</code> 参数设置允许访问的 ip 段。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip='<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>'</span><br></pre></td></tr></table></div></figure><h2 id="配置-jupyter">配置 jupyter<a href="jupyter-installation#配置-jupyter"></a></h2><p>安装环境管理插件</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> nb_conda</span><br></pre></td></tr></table></div></figure><p>安装 markdown 目录插件</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> -c conda-forge jupyter_contrib_nbextensions</span><br></pre></td></tr></table></div></figure><p><code>-c</code> 参数表示自定义安装包搜索频道，下面是 conda -h 帮助菜单中的描述信息</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c CHANNEL, <span class="comment">--channel CHANNEL</span></span><br><span class="line">                      Additional channel <span class="keyword">to</span> <span class="keyword">search</span> <span class="keyword">for</span> packages. These are</span><br><span class="line">                      URLs searched <span class="keyword">in</span> the <span class="keyword">order</span> they are given (including</span><br><span class="line">                      file:// <span class="keyword">for</span> <span class="keyword">local</span> directories). <span class="keyword">Then</span>, the defaults <span class="keyword">or</span></span><br><span class="line">                      channels <span class="keyword">from</span> .condarc are searched (unless</span><br><span class="line">                      <span class="comment">--override-channels is given). You can use 'defaults'</span></span><br><span class="line">                      <span class="keyword">to</span> <span class="keyword">get</span> the <span class="keyword">default</span> packages <span class="keyword">for</span> conda. You can <span class="keyword">also</span></span><br><span class="line">                      use <span class="keyword">any</span> <span class="type">name</span> <span class="keyword">and</span> the .condarc channel_alias <span class="keyword">value</span> will</span><br><span class="line">                      be prepended. The <span class="keyword">default</span> channel_alias <span class="keyword">is</span></span><br><span class="line">                      http://conda.anaconda.org/.</span><br></pre></td></tr></table></div></figure><h2 id="参考">参考<a href="jupyter-installation#参考"></a></h2><ul><li><a href="https://docs.conda.io" target="_blank" rel="noopener">https://docs.conda.io</a></li><li><a href="https://zhuanlan.zhihu.com/p/33105153" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33105153</a></li><li><a href="https://www.jianshu.com/p/042fd657e2d4" target="_blank" rel="noopener">https://www.jianshu.com/p/042fd657e2d4</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先安装-miniconda&quot;&gt;首先安装 miniconda&lt;a href=&quot;jupyter-installation#首先安装-miniconda&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew cask install miniconda&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;查看安装说明&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew cask info miniconda&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;文档里告诉我们要执行下面的命令进行 shell 的配置&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda init &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(basename &quot;$&amp;#123;SHELL&amp;#125;&quot;)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="私服" scheme="https://wuwb.github.io/categories/%E7%A7%81%E6%9C%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Window</title>
    <link href="https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-08-Window.html"/>
    <id>https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-08-Window.html</id>
    <published>2019-11-08T06:16:51.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>Window 接口代表一个包含 DOM document 对象的的窗口。document 对应的 window 对象可以通过 document.defaultView 属性访问到。</p><p>全局的 window 代表脚本运行环境，</p><h2 id="参考">参考<a href="docs-javascript-MDN-web-api-2019-11-08-Window#参考"></a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Window</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Window 接口代表一个包含 DOM document 对象的的窗口。document 对应的 window 对象可以通过 document.defaultView 属性访问到。&lt;/p&gt;
&lt;p&gt;全局的 window 代表脚本运行环境，&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>History</title>
    <link href="https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-04-History.html"/>
    <id>https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-04-History.html</id>
    <published>2019-11-04T02:14:22.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性">属性<a href="docs-javascript-MDN-web-api-2019-11-04-History#属性"></a></h2><p>History.length <code>只读</code></p><pre><code>返回整数，表示历史记录数量，包括当前页面</code></pre><p>History.scrollRestoration <code>实验</code></p><pre><code>允许Web应用程序在历史导航上显式地设置默认滚动恢复行为。此属性可以是自动的（auto）或者手动的（manual）。</code></pre><p>History.state <code>只读</code></p><pre><code>返回一个表示历史堆栈顶部的状态的值。这是一种可以不必等待popstate 事件而查看状态而的方式。</code></pre><a id="more"></a><h3 id="已废弃">已废弃<a href="docs-javascript-MDN-web-api-2019-11-04-History#已废弃"></a></h3><p>History.current</p><pre><code>可以使用 Location.href 来代替它</code></pre><p>History.next</p><pre><code>代表session历史记录中后一个项目URL的DOMString</code></pre><p>History.previous</p><pre><code>代表session历史记录中前一个项目URL的DOMString</code></pre><h2 id="方法">方法<a href="docs-javascript-MDN-web-api-2019-11-04-History#方法"></a></h2><h2 id="概念和使用">概念和使用<a href="docs-javascript-MDN-web-api-2019-11-04-History#概念和使用"></a></h2><p>在历史记录里前进和后退</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window<span class="selector-class">.history</span><span class="selector-class">.back</span>()</span><br><span class="line">window<span class="selector-class">.history</span><span class="selector-class">.forward</span>()</span><br></pre></td></tr></table></div></figure><p>跳转到历史记录里指定的页面，参数是相对当前页面的位置，当前页面是 0。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window<span class="selector-class">.history</span><span class="selector-class">.go</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></div></figure><p>给 go 方法传 0 或者不传参数可以用来刷新当前页面</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>(0);</span><br><span class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>();</span><br></pre></td></tr></table></div></figure><p>可以通过 window.history.length 查看历史堆栈长度</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let numberOfEntries = window<span class="selector-class">.history</span><span class="selector-class">.length</span></span><br></pre></td></tr></table></div></figure><p>window 下可以给 go 方法传递 URL 连接进行跳转，但这不是标准用户，其他引擎不支持。</p><h2 id="例子">例子<a href="docs-javascript-MDN-web-api-2019-11-04-History#例子"></a></h2><p>可以通过 window.onpopstate 监视 history stack pop 出记录的行为</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"location: "</span> + <span class="built_in">document</span>.location + <span class="string">", state: "</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">"title 1"</span>, <span class="string">"?page=1"</span>);</span><br><span class="line">history.back(); <span class="comment">// alerts "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span></span><br></pre></td></tr></table></div></figure><h2 id="参考">参考<a href="docs-javascript-MDN-web-api-2019-11-04-History#参考"></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/History</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/History_API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;属性&quot;&gt;属性&lt;a href=&quot;docs-javascript-MDN-web-api-2019-11-04-History#属性&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;History.length &lt;code&gt;只读&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回整数，表示历史记录数量，包括当前页面&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;History.scrollRestoration &lt;code&gt;实验&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;允许Web应用程序在历史导航上显式地设置默认滚动恢复行为。此属性可以是自动的（auto）或者手动的（manual）。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;History.state &lt;code&gt;只读&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回一个表示历史堆栈顶部的状态的值。这是一种可以不必等待popstate 事件而查看状态而的方式。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>electron 从一到二</title>
    <link href="https://wuwb.github.io/electron-%E4%BB%8E%E4%B8%80%E5%88%B0%E4%BA%8C.html"/>
    <id>https://wuwb.github.io/electron-从一到二.html</id>
    <published>2019-11-01T07:49:01.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="〇、介绍">〇、介绍<a href="electron-从一到二#〇、介绍"></a></h2><p>上一节介绍了 electron 的基础使用，介绍的比较简单，照着文章一步步基本可以打出一个简单的原型项目啦。</p><p>这篇文章介绍一下 electron IM 应用开发中要考虑的一些问题。</p><p>本文主要包括：</p><ol><li>消息加密解密</li><li>消息序列化</li><li>网络传输协议</li><li>私有数据通信协议</li><li>多进程优化</li><li>消息本地存储</li><li>新消息 tray 图标闪烁</li><li>项目自动更新</li><li>进程间通信</li><li>其他</li></ol><a id="more"></a><h2 id="一、消息加密解密">一、消息加密解密<a href="electron-从一到二#一、消息加密解密"></a></h2><h3 id="背景">背景<a href="electron-从一到二#背景"></a></h3><p>对聊天软件而言，消息的保密性就比较重要了，谁也不希望自己的聊天内容泄露甚至暴露在众人的前面。所以在收发信息的时候，我们需要对信息做一些加密解密操作，保证信息在网络中传输的时候是加密的状态。</p><h3 id="简单的实现方法">简单的实现方法<a href="electron-从一到二#简单的实现方法"></a></h3><p>可能大家马上就想这还不简单，项目里写个加密解密的方法。收到消息时候先解密，发送消息时候先加密，服务端收到加密消息直接存储起来。</p><p>这样写理论上也没有问题，不过客户端直接写加解密方法有一些不好的地方。</p><ol><li>容易被逆向。前端代码比较容易被逆向。</li><li>性能较差。在公司中可能加了很多项目的群组，各个群组中都会收到很多消息，前端处理起来比较慢。</li><li>类似的如果都在客户端实现加解密算法，那么 ios, android 等不同客户端，因为使用的开发语言不同，都要要分别实现相同的算法，增加维护成本。</li></ol><h3 id="我们的方案">我们的方案<a href="electron-从一到二#我们的方案"></a></h3><p>我们使用<a href="https://nodejs.org/api/addons.html" target="_blank" rel="noopener">C++ Addons</a> 提供的能力，在 c++ sdk 中实现加解密算法，让 js 可以像调用 Node 模块一样去调用 c++ sdk 模块。这样就一次性解决了上面提到的所有问题。</p><p><img src="https://i.loli.net/2019/11/21/EAY3CdHyuOcQJ1p.png" alt class="article-img"></p><p>开发完 addon, 使用 <a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">node-gyp</a> 来构建 C++ Addons. node-gyp 会根据 binding.gyp 配置文件调用各平台上的编译工具集来进行编译。如果要实现跨平台，需要按不同平台编译 nodejs addon，在 <code>binding.gyp</code> 中按平台配置加解密的静态链接库。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"targets"</span>: [&#123;</span><br><span class="line">        <span class="attr">"conditions"</span>: [</span><br><span class="line">            [<span class="string">"OS=='mac'"</span>, &#123;</span><br><span class="line">                <span class="attr">"libraries"</span>: [</span><br><span class="line">                    <span class="string">"&lt;(module_root_dir)/lib/mac/security.a"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;],</span><br><span class="line">            [<span class="string">"OS=='win'"</span>, &#123;</span><br><span class="line">                <span class="attr">"libraries"</span>: [</span><br><span class="line">                    <span class="string">"&lt;(module_root_dir)/lib/win/security.lib"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;],</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">        ...</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></div></figure><p>当然也可以根据需要添加更多平台的支持，如 linux、unix。</p><p>对 c++ 代码进程封装 addon 的时候，可以使用 <a href="https://github.com/nodejs/node-addon-api" target="_blank" rel="noopener">node-addon-api</a>. node-addon-api 包对 <a href="https://nodejs.org/api/n-api.html" target="_blank" rel="noopener">N-API</a> 做了封装，并抹平了 nodejs 版本间的兼容问题。封装大大降低了非职业 c++ 开发编写 node addon 的成本。关于 node-addon-api、N-API、NAN 等概念可以参考<a href="https://xcoder.in/curriculumvitae/" target="_blank" rel="noopener">死月</a>同学的文章<a href="https://xcoder.in/2017/07/01/nodejs-addon-history/" target="_blank" rel="noopener">从暴力到 NAN 再到 NAPI——Node.js 原生模块开发方式变迁</a></p><p>打包出 .node 文件后，可以在 electron 应用运行时，调用 <code>process.platform</code> 判断运行的平台，分别加载对应平台的 addon。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">trueaddon = <span class="built_in">require</span>(<span class="string">'../lib/security_win.node'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">trueaddon = <span class="built_in">require</span>(<span class="string">'../lib/security_mac.node'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="二、消息序列化和反序列化">二、消息序列化和反序列化<a href="electron-从一到二#二、消息序列化和反序列化"></a></h2><h3 id="背景-1">背景<a href="electron-从一到二#背景-1"></a></h3><p>聊天消息直接通过 JSON 解码和传输效率都比较低。</p><h3 id="我们的方案-1">我们的方案<a href="electron-从一到二#我们的方案-1"></a></h3><p>这里我们引入谷歌的 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">Protocol Buffer</a> 提升效率。关于 Protocol Buffer 更多的介绍，可以查看底部的参考文章。</p><p>node 环境中使用 Protocol Buffer 可以用 <a href="https://www.npmjs.com/package/protobufjs" target="_blank" rel="noopener">protobufjs</a> 包。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i protobuff -S</span><br></pre></td></tr></table></div></figure><p>然后通过 <a href="https://www.npmjs.com/package/protobufjs#pbjs-for-javascript" target="_blank" rel="noopener">pbjs</a> 命令将 proto 文件转换成 pbJson.js</p><p><code>pbjs -t json-module --sparse --force-long -w commonjs -o src/im/data/pbJson.js proto/*.proto</code></p><p>要在 js 中支持后端 int64 格式数据，需要使用 <a href="https://www.npmjs.com/package/long" target="_blank" rel="noopener">long</a> 包配置下 protobuf。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Long = <span class="built_in">require</span>(<span class="string">"long"</span>);</span><br><span class="line">$protobuf.util.Long = Long;</span><br><span class="line">$protobuf.configure();</span><br><span class="line">$protobuf.util.LongBits.prototype.toLong = <span class="function"><span class="keyword">function</span> <span class="title">toLong</span> (<span class="params">unsigned</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> $protobuf.util.Long(<span class="keyword">this</span>.lo | <span class="number">0</span>, <span class="keyword">this</span>.hi | <span class="number">0</span>, <span class="built_in">Boolean</span>(unsigned)).toString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>后面就是消息的压缩转换了，将 js 字符串转成 bp 格式。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PbJson <span class="keyword">from</span> <span class="string">'./path/to/src/im/data/pbJson.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装数据</span></span><br><span class="line"><span class="keyword">let</span> encodedMsg = PbJson.lookupType(<span class="string">'pb-api'</span>).ctor.encode(data).finish();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解封数据</span></span><br><span class="line"><span class="keyword">let</span> decodedMsg = PbJson.lookupType(<span class="string">'pb-api'</span>).ctor.decode(buff);</span><br></pre></td></tr></table></div></figure><h3 id="三、网络传输协议">三、<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">网络传输协议</a><a href="electron-从一到二#三、网络传输协议"></a></h3><p>传输层协议有 UDP/TCP 等。UDP 实时性好，但是可靠性不好。这里选用 TCP 协议。应用层分别使用 WS 协议保持长连接保证实时传输消息，HTTPS 协议传输消息外的其他状态数据。这里给个例子实现一个简单的 WS 管理类</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"><span class="keyword">const</span> webSocketConfig = <span class="string">'wss://xxxx'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    connect () &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.socket)&#123;</span><br><span class="line">truetruetrue<span class="keyword">this</span>.removeEvent(<span class="keyword">this</span>.socket);</span><br><span class="line">truetruetrue<span class="keyword">this</span>.socket.close();</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">this</span>.socket = <span class="keyword">new</span> WebSocket(webSocketConfig);</span><br><span class="line">truetrue<span class="keyword">this</span>.bindEvents(<span class="keyword">this</span>.socket);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close () &#123;&#125;</span><br><span class="line">    <span class="keyword">async</span> getSocket () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    bindEvents() &#123;&#125;</span><br><span class="line">    removeEvent() &#123;&#125;</span><br><span class="line">    onMessage (e) &#123;</span><br><span class="line">        <span class="comment">// 消息解包</span></span><br><span class="line">        <span class="keyword">let</span> decodedMSg = <span class="string">'xxx;</span></span><br><span class="line"><span class="string">        this.emit(decodedMSg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    async send(sendData) &#123;</span></span><br><span class="line"><span class="string">        const socket = await this.getSocket()</span></span><br><span class="line"><span class="string">        socket.send(sendData);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></div></figure><p>https 协议的就不介绍了，大家天天用。</p><h2 id="四、私有数据通信协议">四、私有<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">数据通信协议</a><a href="electron-从一到二#四、私有数据通信协议"></a></h2><p>上几步实现了把聊天消息序列化和反序列化，也实现了通过 websocket 发送和接收消息，但还不能直接这样发送聊天消息。我们还需要一个数据通信协议。给消息增加一些属性，如 id 用来关联收发的消息，type 标记消息类型，version 标记调用接口的版本，api 标记调用的接口等。然后定义一个编码格式， 用 ArrayBuffer 将消息包装起来，放到 ws 中发送，以二进制流的方式传输。</p><p>协议设计需要保证足够的扩展性，不然修改的时候需要同时修改前后端，比较麻烦。</p><p>下面是个简化的例子：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PocketManager</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    encode (id, type, version, api, payload) &#123;</span><br><span class="line">truetrue<span class="keyword">let</span> headerBuffer = Buffer.alloc(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">let</span> payloadBuffer = Buffer.alloc(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> keyLength = Buffer.from(id).length;</span><br><span class="line">        headerBuffer.writeUInt16BE(keyLength, offset);</span><br><span class="line">        offset += <span class="number">2</span>;</span><br><span class="line">        headerBuffer.write(id, offset, offset + keyLength, <span class="string">'utf8'</span>);</span><br><span class="line">        ...</span><br><span class="line">        payloadBuffer = Buffer.from(payload);</span><br><span class="line">truetrue<span class="keyword">return</span> Buffer.concat([headerBuffer, payloadBuffer], <span class="number">8</span> + payloadBuffer.length);</span><br><span class="line">    &#125;</span><br><span class="line">    decode () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="五、多进程优化">五、多进程优化<a href="electron-从一到二#五、多进程优化"></a></h2><p>IM 界面有很多模块，聊天模块，群管理模块，历史消息模块等。另外消息通信逻辑不应该和界面逻辑放一个进程里，避免界面卡顿时候影响消息的收发。这里有个简单的实现方法，把不同的模块放到 electorn 不同的窗口中，因为不同的窗口由不同的进程管理，我们就不需要自己管理进程了。下面实现一个窗口管理类。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseWindow</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    open () &#123;&#125;</span><br><span class="line">    close () &#123;&#125;</span><br><span class="line">    isExist () &#123;&#125;</span><br><span class="line">    destroy() &#123;&#125;</span><br><span class="line">    createWindow() &#123;</span><br><span class="line">        <span class="keyword">this</span>.win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">truetruetrue...this.browserConfig,</span><br><span class="line">truetrue&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中 browserConfig 可以在子类中设置，不同窗口可以继承这个基类设置自己窗口属性。通信模块用作后台收发数据，不需要显示窗口，可以设置窗口 width = 0，height = 0 。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImWindow</span> <span class="keyword">extends</span> <span class="title">BaseWindow</span> </span>&#123;</span><br><span class="line">    browserConfig = &#123;</span><br><span class="line">truetruewidth: <span class="number">0</span>,</span><br><span class="line">truetrueheight: <span class="number">0</span>,</span><br><span class="line">truetrueshow: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="六、消息存储">六、消息存储<a href="electron-从一到二#六、消息存储"></a></h2><h3 id="背景-2">背景<a href="electron-从一到二#背景-2"></a></h3><p>IM 软件中可能会有几千个联系人信息，无数的聊天记录。如果每次都通过网络请求访问，比较浪费带宽，影响性能。</p><h3 id="讨论">讨论<a href="electron-从一到二#讨论"></a></h3><p>electorn 中可以使用 localstorage, 但是 localstorage 有大小限制，实际大多只能存 5M 信息，超过存入大小会报错。</p><p>有些同学可能还会想到 <a href="https://www.w3.org/TR/webdatabase/" target="_blank" rel="noopener">websql</a>, 但这个技术标准已经被废弃了。</p><p>浏览器内置的 <a href="https://www.w3.org/TR/IndexedDB-2/" target="_blank" rel="noopener">indexedDB</a> 也是一个可选项。不过这个也有限制，也没有 sqlite 一样丰富的生态工具可以用。</p><h3 id="方案">方案<a href="electron-从一到二#方案"></a></h3><p>这里我们选用 sqlite。在 node 中使用 sqlite 可以直接用 <a href="https://www.npmjs.com/package/sqlite3" target="_blank" rel="noopener">sqlite3</a> 包。</p><p>可以先写个 DAO 类</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="keyword">from</span> <span class="string">'sqlite3'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(dbFilePath) &#123;</span><br><span class="line">        <span class="keyword">this</span>.db = <span class="keyword">new</span> sqlite3.Database(dbFilePath, (err) =&gt; &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    run(sql, params = []) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.db.run(sql, params, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve(&#123; <span class="attr">id</span>: <span class="keyword">this</span>.lastID &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>再写个 base Model</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(dao, tableName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">        <span class="keyword">this</span>.tableName = tableName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.run(<span class="string">`DELETE FROM <span class="subst">$&#123;<span class="keyword">this</span>.tableName&#125;</span> WHERE id = ?`</span>, [id]);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其他 Model 比如消息、联系人等 Model 可以直接继承这个类，复用 delete/getById/getAll 之类的通用方法。如果不喜欢手动编写 SQLite 语句，可以引入 <a href="https://www.npmjs.com/package/knex" target="_blank" rel="noopener">knex</a> 语法封装器。当然也可以直接时髦点用上 <a href="https://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" rel="noopener">orm</a> ，比如 <a href="https://typeorm.io" target="_blank" rel="noopener">typeorm</a> 什么的。</p><p>使用的时候</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dao = <span class="keyword">new</span> AppDAO(<span class="string">'path/to/database-file.sqlite3'</span>);</span><br><span class="line"><span class="keyword">const</span> messageModel = <span class="keyword">new</span> MessageModel(dao);</span><br></pre></td></tr></table></div></figure><h2 id="七、新消息-tray-图标闪烁">七、新消息 tray 图标闪烁<a href="electron-从一到二#七、新消息-tray-图标闪烁"></a></h2><p>electron 没有提供专用的 <a href="https://electronjs.org/docs/api/tray" target="_blank" rel="noopener">tray</a> 闪烁的接口，我们可以简单的使用切换 tray 图标来实现这个功能。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Tray, nativeImage &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrayManager</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    setState() &#123;</span><br><span class="line">        <span class="comment">// 设置默认状态</span></span><br><span class="line">    &#125;</span><br><span class="line">truestartBlink()&#123;</span><br><span class="line">truetrue<span class="keyword">if</span>(!<span class="keyword">this</span>.tray)&#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">let</span> emptyImg = nativeImage.createFromPath(path.join(__dirname, <span class="string">'./empty.ico'</span>));</span><br><span class="line">truetrue<span class="keyword">let</span> noticeImg = nativeImage.createFromPath(path.join(__dirname, <span class="string">'./newMsg.png'</span>));</span><br><span class="line">truetrue<span class="keyword">let</span> visible;</span><br><span class="line">truetrueclearInterval(<span class="keyword">this</span>.trayTimer);</span><br><span class="line">truetrue<span class="keyword">this</span>.trayTimer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">truetruetruevisible = !visible;</span><br><span class="line">truetruetrue<span class="keyword">if</span>(visible)&#123;</span><br><span class="line">truetruetruetrue<span class="keyword">this</span>.tray.setImage(noticeImg);</span><br><span class="line">truetruetrue&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetruetruetrue<span class="keyword">this</span>.tray.setImage(emptyImg);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;,<span class="number">500</span>);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">//停止闪烁</span></span><br><span class="line">truestopBlink()&#123;</span><br><span class="line">truetrueclearInterval(<span class="keyword">this</span>.trayTimer);</span><br><span class="line">truetrue<span class="keyword">this</span>.setState();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="八、项目自动更新">八、项目自动更新<a href="electron-从一到二#八、项目自动更新"></a></h2><p>一般有几种不同的更新策略，可以一种或几种结合使用，提升体验。</p><p>第一种是整个软件更新。这种方式比较暴力，体验不好，打开应用检查到版本变更，直接重新下载整个应用替换老版本。改一行代码，让用户冲下百来兆的文件</p><p>第二种是检测文件变更，下载替换老文件进行升级。</p><p>第三种是直接将 view 层文件放在线上，electron 壳加载线上页面访问。有变更发布线上页面就可以。</p><h2 id="九、进程间通信">九、进程间通信<a href="electron-从一到二#九、进程间通信"></a></h2><p>上一篇文章中，有同学问怎么处理进程间通信。electron 进程间通信主要用到 <a href="https://electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">ipcMain</a> 和 <a href="https://electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener">ipcRenderer</a>.</p><p><img src="https://i.loli.net/2019/11/20/uYMld67RHh4WGgj.png" alt class="article-img"></p><p>可以先写个发消息的方法。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remote, ipcRenderer, ipcMain &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendIPCEvent</span>(<span class="params">event, ...data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">require</span>(<span class="string">'./is-electron-renderer'</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentWindow = remote.getCurrentWindow();</span><br><span class="line">        <span class="keyword">if</span> (currentWindow) &#123;</span><br><span class="line">            currentWindow.webContents.send(event, ...data);</span><br><span class="line">        &#125;</span><br><span class="line">        ipcRenderer.send(event, ...data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ipcMain.emit(event, <span class="literal">null</span>, ...data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sendIPCEvent;</span><br></pre></td></tr></table></div></figure><p>这样不管在主进程还是渲染进程，直接调用这个方法就可以发消息。对于某些特定功能的消息，还可以做一些封装，比如所有推送消息可以封装一个方法，通过方法中的参数判断具体推送的消息类型。main 进程中根据消息类型，处理相关逻辑，或者对消息进行转发。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ipcMainManager</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        ipcMain.on(<span class="string">'imPush'</span>, (name, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.emit(name, data);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.listern();</span><br><span class="line">    &#125;</span><br><span class="line">    listern() &#123;</span><br><span class="line">        <span class="keyword">this</span>.on(<span class="string">'imPush'</span>, (name, data) =&gt; &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ipcRendererManager</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    push (name, data) &#123;</span><br><span class="line">        ipcRenderer.send(<span class="string">'imPush'</span>, name, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="十、其他">十、其他<a href="electron-从一到二#十、其他"></a></h2><p>还有同学提到日志处理功能。这个和 electron 关系不大，是 node 项目通用的功能。可以选用 <a href="https://www.npmjs.com/package/winston" target="_blank" rel="noopener">winston</a> 之类第三方包。本地日志的话注意一下存储的路径，定期清理等功能点，远程日志提交到接口就可以了。获取路径可以写些通用的方法，如：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> electron <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDataPath</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">require</span>(<span class="string">'./is-electron-renderer'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> electron.remote.app.getPath(<span class="string">'userData'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> electron.app.getPath(<span class="string">'userData'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getUserDataPath;</span><br></pre></td></tr></table></div></figure><h2 id="PS">PS<a href="electron-从一到二#PS"></a></h2><p>有问题可以加我微信交流：</p><img src="https://i.loli.net/2019/11/21/FDfyaV92ONl4bc6.jpg" width="200" height="200" class="article-img"><p>还可以关注我的博客<a href="https://wuwb.me/" target="_blank" rel="noopener">前端印象 https://wuwb.me/</a>，跟踪最新分享。</p><h2 id="参考">参考<a href="electron-从一到二#参考"></a></h2><ul><li><a href="https://iweiyun.github.io/2019/01/04/node-cpp-addon/" target="_blank" rel="noopener">node-cpp-addon</a></li><li><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html" target="_blank" rel="noopener">serialization-vs-deserialization</a></li><li><a href="https://zhuanlan.zhihu.com/p/53339153" target="_blank" rel="noopener">Protobuf比JSON性能更好</a></li><li><a href="https://fed.taobao.org/blog/2016/09/21/type-casts-between-node-and-cpp/" target="_blank" rel="noopener">Node.js 和 C++ 之间的类型转换</a></li><li><a href="https://www.npmtrends.com" target="_blank" rel="noopener">npmtrends</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;〇、介绍&quot;&gt;〇、介绍&lt;a href=&quot;electron-从一到二#〇、介绍&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一节介绍了 electron 的基础使用，介绍的比较简单，照着文章一步步基本可以打出一个简单的原型项目啦。&lt;/p&gt;
&lt;p&gt;这篇文章介绍一下 electron IM 应用开发中要考虑的一些问题。&lt;/p&gt;
&lt;p&gt;本文主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息加密解密&lt;/li&gt;
&lt;li&gt;消息序列化&lt;/li&gt;
&lt;li&gt;网络传输协议&lt;/li&gt;
&lt;li&gt;私有数据通信协议&lt;/li&gt;
&lt;li&gt;多进程优化&lt;/li&gt;
&lt;li&gt;消息本地存储&lt;/li&gt;
&lt;li&gt;新消息 tray 图标闪烁&lt;/li&gt;
&lt;li&gt;项目自动更新&lt;/li&gt;
&lt;li&gt;进程间通信&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="im" scheme="https://wuwb.github.io/tags/im/"/>
    
      <category term="electron" scheme="https://wuwb.github.io/tags/electron/"/>
    
      <category term="node-gyp" scheme="https://wuwb.github.io/tags/node-gyp/"/>
    
      <category term="protocol-buffer" scheme="https://wuwb.github.io/tags/protocol-buffer/"/>
    
  </entry>
  
  <entry>
    <title>Performance</title>
    <link href="https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-01-performance.html"/>
    <id>https://wuwb.github.io/docs-javascript-MDN-web-api-2019-11-01-performance.html</id>
    <published>2019-11-01T04:13:34.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>Performance 接口可以获取到当前页面中与性能相关的信息。</p><p>它是 High Resolution Time API 的一部分，同时也融合了<br>    - High Resolution Time Level 3, Defines timeOrigin property.<br>    - High Resolution Time Level 2, Defines toJson() method.<br>    - High Resolution Time, Defines now() method.</p><ul><li>Performance Timeline API</li><li>Navigation Timing API</li><li>User Timing API<ul><li>User Timing Performance extensions, Defines mark(), clearMark(), measure() and clearMeasure() methods.</li></ul></li><li>Resource Timing API</li></ul><a id="more"></a><h2 id="参考">参考<a href="docs-javascript-MDN-web-api-2019-11-01-performance#参考"></a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Performance</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry/entryType" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry/entryType</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/navigation" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/navigation</a></p></li><li><p><a href="https://www.w3.org/TR/navigation-timing/#sec-navigation-info-interface" target="_blank" rel="noopener">https://www.w3.org/TR/navigation-timing/#sec-navigation-info-interface</a></p></li><li><p><a href="https://juejin.im/entry/58ba9cb5128fe100643da2cc" target="_blank" rel="noopener">https://juejin.im/entry/58ba9cb5128fe100643da2cc</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Performance 接口可以获取到当前页面中与性能相关的信息。&lt;/p&gt;
&lt;p&gt;它是 High Resolution Time API 的一部分，同时也融合了&lt;br&gt;    - High Resolution Time Level 3, Defines timeOrigin property.&lt;br&gt;    - High Resolution Time Level 2, Defines toJson() method.&lt;br&gt;    - High Resolution Time, Defines now() method.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance Timeline API&lt;/li&gt;
&lt;li&gt;Navigation Timing API&lt;/li&gt;
&lt;li&gt;User Timing API&lt;ul&gt;
&lt;li&gt;User Timing Performance extensions, Defines mark(), clearMark(), measure() and clearMeasure() methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Timing API&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mac 安装 minikube 方法</title>
    <link href="https://wuwb.github.io/mac-%E5%AE%89%E8%A3%85-minikube-%E6%96%B9%E6%B3%95.html"/>
    <id>https://wuwb.github.io/mac-安装-minikube-方法.html</id>
    <published>2019-10-22T05:25:19.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求">需求<a href="mac-安装-minikube-方法#需求"></a></h2><ul><li>macOS 10.12(Sierra)</li><li>安装有 Hyperkit, Parallels, VirtualBox 或 VMware Fusion 虚拟层</li></ul><h2 id="安装">安装<a href="mac-安装-minikube-方法#安装"></a></h2><p>有两种安装方法，一个通过 brew 安装，也是推荐的方式，一个是通过脚本直接安装。</p><a id="more"></a><p>用 brew 安装</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span>minikube</span><br></pre></td></tr></table></div></figure><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https:<span class="regexp">//</span>storage.googleapis.com<span class="regexp">/minikube/</span>releases<span class="regexp">/latest/mi</span>nikube-darwin-amd64 \</span><br><span class="line">  &amp;&amp; sudo install minikube-darwin-amd64 <span class="regexp">/usr/</span>local<span class="regexp">/bin/mi</span>nikube</span><br></pre></td></tr></table></div></figure><h2 id="升级">升级<a href="mac-安装-minikube-方法#升级"></a></h2><p>通过 brew 安装的升级比较简单，执行下列命令即可</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rm</span> /usr/local/<span class="keyword">bin/minikube</span></span><br><span class="line"><span class="keyword">brew </span>cask reinstall minikube</span><br></pre></td></tr></table></div></figure><p>通过脚本安装的话，应该重新执行下脚本就可以（猜测）。</p><h2 id="虚拟层配置">虚拟层配置<a href="mac-安装-minikube-方法#虚拟层配置"></a></h2><p>mac 下推荐使用 Hyperkit, 比较简单</p><h3 id="需要">需要<a href="mac-安装-minikube-方法#需要"></a></h3><ul><li>macOS 10.11+</li><li>HyperKit</li></ul><h3 id="Hyperkit-安装">Hyperkit 安装<a href="mac-安装-minikube-方法#Hyperkit-安装"></a></h3><ul><li>如果电脑已经装了 Docker for Desktop，那就已经有 Hyperkit 了。</li><li>没有的话可以通过 brew 安装</li></ul><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>hyperkit</span><br></pre></td></tr></table></div></figure><ul><li>另外也可以通过 <a href="https://github.com/moby/hyperkit" target="_blank" rel="noopener">github 源码安装</a></li></ul><h3 id="使用方法">使用方法<a href="mac-安装-minikube-方法#使用方法"></a></h3><p>使用 hyperkit 驱动启动 cluster</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube <span class="built_in">start</span> <span class="comment">--vm-driver=hyperkit</span></span><br></pre></td></tr></table></div></figure><p>将 hyperkit 设置为默认驱动</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube<span class="built_in"> config </span><span class="builtin-name">set</span> vm-driver hyperkit</span><br></pre></td></tr></table></div></figure><h2 id="了解-Kubernetes">了解 Kubernetes<a href="mac-安装-minikube-方法#了解-Kubernetes"></a></h2><p>启动后，可以通过常规的 Kubernetes 命令来和 minikube cluster 进行交互。比如，可以通过下列命令来查看 pod 的状态。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> po -A</span><br></pre></td></tr></table></div></figure><h2 id="增加分配的内存">增加分配的内存<a href="mac-安装-minikube-方法#增加分配的内存"></a></h2><p>minikube 默认值分配 2GB 内存，只够普通的部署，如果需要更大规模的部署，可以通过 <code>--memory</code> 标签增加分配的内存。或者通过下列命令将内存分配参数存起来持久化。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube<span class="built_in"> config </span><span class="builtin-name">set</span> memory 4096</span><br></pre></td></tr></table></div></figure><h3 id="参考">参考<a href="mac-安装-minikube-方法#参考"></a></h3><ul><li><a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">https://github.com/kubernetes/minikube</a></li><li><a href="https://minikube.sigs.k8s.io/docs/start/macos/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/start/macos/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;需求&lt;a href=&quot;mac-安装-minikube-方法#需求&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;macOS 10.12(Sierra)&lt;/li&gt;
&lt;li&gt;安装有 Hyperkit, Parallels, VirtualBox 或 VMware Fusion 虚拟层&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;a href=&quot;mac-安装-minikube-方法#安装&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有两种安装方法，一个通过 brew 安装，也是推荐的方式，一个是通过脚本直接安装。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用 docker compose 部署 odoo 12</title>
    <link href="https://wuwb.github.io/%E7%94%A8-docker-compose-%E9%83%A8%E7%BD%B2-odoo-12.html"/>
    <id>https://wuwb.github.io/用-docker-compose-部署-odoo-12.html</id>
    <published>2019-10-21T13:55:44.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了一个威联通 Nas, 试着在上面安装一个 CRM 系统给老婆的店铺用。官方给的例子比较简单，我这里做了一些扩充。</p><p>威联通内置的 Container Station 不太好用，这里是通过 ssh 连上威联通，直接通过 docker-compose.yml 文件创建服务。本着简单的原则，威联通上 docker 无法下载镜像等问题，等我再开一篇文章介绍。</p><p>先是一个合并两个服务的 docker compose 编排方式。</p><a id="more"></a><figure class="highlight"><figcaption><span>/share/Container/services/odoo/docker-compose.yml</span></figcaption><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: '3.1'</span><br><span class="line"></span><br><span class="line"><span class="attribute">services:</span></span><br><span class="line">  odoo:</span><br><span class="line">    <span class="attribute">image</span>: odoo:12.0</span><br><span class="line">    <span class="attribute">container_name</span>: odoo</span><br><span class="line">    <span class="attribute">depend_on</span>: postgres</span><br><span class="line">    <span class="attribute">ports:</span></span><br><span class="line">      - "8069:8069"</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - odoo</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      - HOST=postgres</span><br><span class="line">      - PORT=5432</span><br><span class="line">      - USER=odoo</span><br><span class="line">      - PASSWORD=odoo</span><br><span class="line">    <span class="attribute">volumes:</span></span><br><span class="line">      - /share/Container/data/odoo/data:/var/lib/odoo</span><br><span class="line">      - /share/Container/data/odoo/config:/etc/odoo</span><br><span class="line">      - /share/Container/data/odoo/addons:/mnt/extra-addons</span><br><span class="line"></span><br><span class="line">  <span class="attribute">postgres:</span></span><br><span class="line">    image: postgres:10</span><br><span class="line">    <span class="attribute">container_name</span>: postgres</span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line">    <span class="attribute">ports:</span></span><br><span class="line">      - "5432:5432"</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - odoo</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      - POSTGRES_DB=postgres</span><br><span class="line">      - POSTGRES_PASSWORD=odoo</span><br><span class="line">      - POSTGRES_USER=odoo</span><br><span class="line">      - PGDATA=/var/lib/postgresql/data/pgdata</span><br><span class="line">    <span class="attribute">volumes:</span></span><br><span class="line">      - /share/Container/data/postgres/data:/var/lib/postgresql/data/pgdata</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks:</span></span><br><span class="line">    odoo:</span><br><span class="line">        <span class="attribute">external</span>: true</span><br></pre></td></tr></table></div></figure><p>有些人可能想把 postgres 分出来，给其他服务共同使用。那要的话，可以把 postgres 拿出来单独放一个 docker-compose 配置中，然后 odoo 的 compose 文件中通过 link 将两个容器连接起来，连接起来后两个容器的 hosts 中会自动注入各自容器 ip 和 别名，比如：</p><figure class="highlight"><figcaption><span>/etc/hosts</span></figcaption><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.17</span><span class="number">.2</span><span class="number">.186</span>  postgres</span><br><span class="line"><span class="number">172.17</span><span class="number">.2</span><span class="number">.186</span>  odoo</span><br></pre></td></tr></table></div></figure><p>同样的，odoo 的环境变量配置中设置 <code>HOST=postgres</code> 就可以。</p><h3 id="参考">参考<a href="用-docker-compose-部署-odoo-12#参考"></a></h3><ul><li><a href="https://hub.docker.com/_/odoo" target="_blank" rel="noopener">https://hub.docker.com/_/odoo</a></li><li><a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener">https://hub.docker.com/_/postgres</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近买了一个威联通 Nas, 试着在上面安装一个 CRM 系统给老婆的店铺用。官方给的例子比较简单，我这里做了一些扩充。&lt;/p&gt;
&lt;p&gt;威联通内置的 Container Station 不太好用，这里是通过 ssh 连上威联通，直接通过 docker-compose.yml 文件创建服务。本着简单的原则，威联通上 docker 无法下载镜像等问题，等我再开一篇文章介绍。&lt;/p&gt;
&lt;p&gt;先是一个合并两个服务的 docker compose 编排方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="odoo" scheme="https://wuwb.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>odoo 12 配置文件解析</title>
    <link href="https://wuwb.github.io/odoo-12-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90.html"/>
    <id>https://wuwb.github.io/odoo-12-配置文件解析.html</id>
    <published>2019-10-21T13:28:07.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>在解析配置文件之前，我们先获取一份默认的配置文件。可以通过 docker cp 命令从 docker container 中拷贝一份出来。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="string">e683b42dd8c2:</span><span class="regexp">/etc/</span>odoo<span class="regexp">/odoo.conf ~/</span>Desktop/odoo.conf</span><br></pre></td></tr></table></div></figure><a id="more"></a><p>获取的配置文件就是下面这样，我加上了注释：</p><figure class="highlight"><figcaption><span>~/Desktop/odoo.conf</span></figcaption><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[options]</span></span><br><span class="line"><span class="comment">; addons模块的查找路径</span></span><br><span class="line"><span class="attr">addons_path</span> = /mnt/extra-addons</span><br><span class="line"></span><br><span class="line"><span class="comment">; data目录, 用于存放session信息、附件</span></span><br><span class="line"><span class="attr">data_dir</span> = /var/lib/odoo</span><br><span class="line"></span><br><span class="line"><span class="comment">; 管理员主控密码(用于创建、还原和备份数据库等操作)</span></span><br><span class="line"><span class="comment">; admin_passwd = admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 用于导入导出的csv文件的默认分隔符</span></span><br><span class="line"><span class="comment">; csv_internal_sep = ,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">; 数据库最大连接数</span></span><br><span class="line"><span class="comment">; db_maxconn = 64</span></span><br><span class="line"><span class="comment">; 指定要使用的数据库名</span></span><br><span class="line"><span class="comment">; db_name = False</span></span><br><span class="line"><span class="comment">; 创建新数据库时使用的数据库模板</span></span><br><span class="line"><span class="comment">; db_template = template1</span></span><br><span class="line"><span class="comment">; 过滤要显示的数据库名称</span></span><br><span class="line"><span class="comment">; dbfilter = .*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否为调试模式</span></span><br><span class="line"><span class="comment">; debug_mode = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 用于发送邮件的邮箱地址</span></span><br><span class="line"><span class="comment">; email_from = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 一个处理器允许使用的最大物理内存</span></span><br><span class="line"><span class="comment">; limit_memory_hard = 2684354560</span></span><br><span class="line"><span class="comment">; 一个处理器允许使用的最大虚拟内存</span></span><br><span class="line"><span class="comment">; limit_memory_soft = 2147483648</span></span><br><span class="line"><span class="comment">; 一个处理器接受的最大请求数</span></span><br><span class="line"><span class="comment">; limit_request = 8192</span></span><br><span class="line"><span class="comment">; 一个请求最多占用多少处理器时间</span></span><br><span class="line"><span class="comment">; limit_time_cpu = 60</span></span><br><span class="line"><span class="comment">; 一个请求允许的最长实时时间，默认为120</span></span><br><span class="line"><span class="attr">limit_time_real</span> = <span class="number">600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否允许显示数据库列表</span></span><br><span class="line"><span class="comment">; list_db = True</span></span><br><span class="line"><span class="comment">; 是否将log写入db的ir_logging表</span></span><br><span class="line"><span class="comment">; log_db = False</span></span><br><span class="line"><span class="comment">; 可以是一组module:log_level对, 默认值是:INFO(表示所有模块的默认日志级别为INFO级别)</span></span><br><span class="line"><span class="comment">; log_handler = [':INFO']</span></span><br><span class="line"><span class="comment">; 日志的级别, 可选值包括debug_rpc_answer, debug_rpc, debug, debug_sql, info, warn, error, critical</span></span><br><span class="line"><span class="comment">; log_level = info</span></span><br><span class="line"><span class="comment">; 指定用来存储日志的文件</span></span><br><span class="line"><span class="comment">; logfile = None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 长连接池使用的端口号?</span></span><br><span class="line"><span class="comment">; longpolling_port = 8072</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 处理当前计划任务的最大线程数</span></span><br><span class="line"><span class="comment">; max_cron_threads = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 强制保存在virtual osv_memory表中的记录的最长时间，以小时为单位</span></span><br><span class="line"><span class="comment">; osv_memory_age_limit = 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 强制一个virtual osv_memory表的最大记录数</span></span><br><span class="line"><span class="comment">; osv_memory_count_limit = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 发送邮件的SMTP用户密码</span></span><br><span class="line"><span class="comment">; smtp_password = False</span></span><br><span class="line"><span class="comment">; smtp_port = 25</span></span><br><span class="line"><span class="comment">; smtp_server = localhost</span></span><br><span class="line"><span class="comment">; smtp_ssl = False</span></span><br><span class="line"><span class="comment">; smtp_user = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 要使用的处理器数量</span></span><br><span class="line"><span class="comment">; workers = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否禁止使用XML-RPC协议</span></span><br><span class="line"><span class="comment">; xmlrpc = True</span></span><br><span class="line"><span class="comment">; 指定使用XML-RPC协议的IP地址，为空时表示绑定到现有IP</span></span><br><span class="line"><span class="comment">; xmlrpc_interface =</span></span><br><span class="line"><span class="comment">; XML-RPC协议使用的TCP端口</span></span><br><span class="line"><span class="comment">; xmlrpc_port = 8069</span></span><br><span class="line"><span class="comment">; 是否禁止使用XML-RPC安全协议</span></span><br><span class="line"><span class="comment">; xmlrpcs = True</span></span><br><span class="line"><span class="comment">; 指定使用XML-RPC安全协议的IP地址，为空时表示绑定到现有IP</span></span><br><span class="line"><span class="comment">; xmlrpcs_interface =</span></span><br><span class="line"><span class="comment">; XML-RPC安全协议使用的TCP端口</span></span><br><span class="line"><span class="comment">; xmlrpcs_port = 8071</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在解析配置文件之前，我们先获取一份默认的配置文件。可以通过 docker cp 命令从 docker container 中拷贝一份出来。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker cp &lt;span class=&quot;string&quot;&gt;e683b42dd8c2:&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;odoo&lt;span class=&quot;regexp&quot;&gt;/odoo.conf ~/&lt;/span&gt;Desktop/odoo.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="odoo" scheme="https://wuwb.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>quote</title>
    <link href="https://wuwb.github.io/quotes-2017-03-01-quote.html"/>
    <id>https://wuwb.github.io/quotes-2017-03-01-quote.html</id>
    <published>2017-03-01T06:45:00.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>“过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。”——陈素封</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。”——陈素封&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ps aux命令显示的状态列中的Ss+，Rsl，R+，S&lt;sl 的意思</title>
    <link href="https://wuwb.github.io/ps-aux%E5%91%BD%E4%BB%A4%E6%98%BE%E7%A4%BA%E7%9A%84%E7%8A%B6%E6%80%81%E5%88%97%E4%B8%AD%E7%9A%84Ss-%EF%BC%8CRsl%EF%BC%8CR-%EF%BC%8CS-sl-%E7%9A%84%E6%84%8F%E6%80%9D.html"/>
    <id>https://wuwb.github.io/ps-aux命令显示的状态列中的Ss-，Rsl，R-，S-sl-的意思.html</id>
    <published>2016-10-28T02:28:33.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep phantomjs</span><br><span class="line"></span><br><span class="line">mapp <span class="number">27466</span>  <span class="number">5.0</span> <span class="number">0.0</span> <span class="number">2188340</span> <span class="number">37596</span> ? Sl <span class="number">10</span>:<span class="number">26</span> <span class="number">0</span>:<span class="number">00</span> /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:<span class="comment">//i.mogujie.com/dapei/16n51o</span></span><br><span class="line">mapp <span class="number">27896</span> <span class="number">27.5</span> <span class="number">0.0</span> <span class="number">2187268</span> <span class="number">36180</span> ? Sl <span class="number">10</span>:<span class="number">26</span> <span class="number">0</span>:<span class="number">00</span> /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:<span class="comment">//i.mogujie.com/1109x2</span></span><br><span class="line">mapp <span class="number">27899</span> <span class="number">26.0</span> <span class="number">0.0</span> <span class="number">2187268</span> <span class="number">37712</span> ? Sl <span class="number">10</span>:<span class="number">26</span> <span class="number">0</span>:<span class="number">00</span> /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:<span class="comment">//i.mogujie.com/detail/18haeae</span></span><br><span class="line">mapp <span class="number">27937</span> <span class="number">44.0</span> <span class="number">0.0</span> <span class="number">2034388</span> <span class="number">33456</span> ? Sl <span class="number">10</span>:<span class="number">26</span> <span class="number">0</span>:<span class="number">00</span> /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:<span class="comment">//i.mogujie.com/dapei/1si2k</span></span><br><span class="line">mapp <span class="number">27940</span> <span class="number">33.0</span> <span class="number">0.0</span> <span class="number">2032320</span> <span class="number">29912</span> ? Sl <span class="number">10</span>:<span class="number">26</span> <span class="number">0</span>:<span class="number">00</span> /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/PCspider.js http:<span class="comment">//ai.mogujie.com/13fosi</span></span><br></pre></td></tr></table></div></figure><a id="more"></a><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D    不可中断     Uninterruptible sleep (usually IO)</span><br><span class="line">R    正在运行，或在队列中的进程</span><br><span class="line">S    处于休眠状态</span><br><span class="line">T    停止或被追踪</span><br><span class="line">Z    僵尸进程</span><br><span class="line">W    进入内存交换（从内核2.6开始无效）</span><br><span class="line">X    死掉的进程</span><br><span class="line"></span><br><span class="line">&lt;    高优先级</span><br><span class="line">N    低优先级</span><br><span class="line">L    有些页被锁进内存</span><br><span class="line">s    包含子进程</span><br><span class="line">+    位于后台的进程组；</span><br><span class="line">l    多线程，克隆线程  multi-threaded (using CLONE_THREAD, like NPTL pthreads do)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps aux | grep phantomjs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapp &lt;span class=&quot;number&quot;&gt;27466&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2188340&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;37596&lt;/span&gt; ? Sl &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:&lt;span class=&quot;comment&quot;&gt;//i.mogujie.com/dapei/16n51o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapp &lt;span class=&quot;number&quot;&gt;27896&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27.5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2187268&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;36180&lt;/span&gt; ? Sl &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:&lt;span class=&quot;comment&quot;&gt;//i.mogujie.com/1109x2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapp &lt;span class=&quot;number&quot;&gt;27899&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;26.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2187268&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;37712&lt;/span&gt; ? Sl &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:&lt;span class=&quot;comment&quot;&gt;//i.mogujie.com/detail/18haeae&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapp &lt;span class=&quot;number&quot;&gt;27937&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;44.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2034388&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;33456&lt;/span&gt; ? Sl &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/H5spider.js http:&lt;span class=&quot;comment&quot;&gt;//i.mogujie.com/dapei/1si2k&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapp &lt;span class=&quot;number&quot;&gt;27940&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;33.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2032320&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;29912&lt;/span&gt; ? Sl &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; /usr/local/bin/phantomjs /home/mapp/mogu-spider/src/spider/PCspider.js http:&lt;span class=&quot;comment&quot;&gt;//ai.mogujie.com/13fosi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Frontend Knowledge Structure</title>
    <link href="https://wuwb.github.io/Frontend-Knowledge-Structure.html"/>
    <id>https://wuwb.github.io/Frontend-Knowledge-Structure.html</id>
    <published>2016-07-17T05:20:06.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发知识结构</p><p>前端工程师</p><p>浏览器<br>IE6/7/8/9/10/11 (Trident)<br>Firefox (Gecko)<br>Chrome/Chromium (Blink)<br>Safari (WebKit)<br>Opera (Blink)<br>编程语言<br>JavaScript/Node.js<br>CoffeeScript<br>TypeScript<br>切页面<br>HTML/HTML5<br>CSS/CSS3<br>Sass/LESS/Stylus/postCSS<br>PhotoShop/Paint.net/Fireworks/GIMP/Sketch</p><a id="more"></a><p>开发工具<br>编辑器和IDE<br>VIM/Sublime Text2<br>Notepad++/EditPlus<br>WebStorm<br>Emacs EmacsWiki<br>Brackets<br>Atom<br>Lime Text<br>Light Table<br>Codebox<br>TextMate<br>Neovim<br>Komodo IDE / Edit<br>Eclipse<br>Visual Studio/Visual Studio Code<br>NetBeans<br>Cloud9 IDE<br>HBuilder<br>Nuclide<br>VS code<br>调试工具<br>Firebug/Firecookie<br>YSlow<br>IEDeveloperToolbar/IETester<br>Fiddler<br>Chrome Dev Tools<br>Dragonfly<br>DebugBar<br>Venkman<br>Charles<br>版本管理<br>Git/SVN/Mercurial<br>Github/GitLab/Bitbucket/Gitorious/GNU Savannah/Launchpad/SourceForge/TeamForge<br>代码质量<br>Coding style<br>JSLint/JSHint/jscs/ESLint<br>CSSLint<br>Markup Validation Service<br>HTML Validators<br>单元测试<br>QUnit/Jasmine<br>Mocha/Should/Chai/Expect<br>Unit JS<br>自动化测试<br>WebDriver/Protractor/Karma Runner/Sahi<br>phantomjs<br>SourceLabs/BrowserStack<br>前端库/框架<br>jQuery/Underscore/Mootools/Prototype.js<br>YUI3/Dojo/ExtJS/KISSY<br>Backbone/KnockoutJS/Emberjs<br>AngularJS<br>Batarang<br>Bootstrap<br>Semantic UI<br>Juice UI<br>Web Atoms<br>Polymer<br>Dhtmlx<br>qooxdoo<br>React<br>Brick<br>vue.js<br>前端标准/规范<br>HTTP/1.1: RFCs 7230-7235<br>HTTP/2<br>ECMAScript3/5<br>ECMAScript6<br>W3C: DOM/BOM/XHTML/XML/JSON/JSONP/…<br>CommonJS Modules/AMD<br>HTML5/CSS3<br>Semantic Web<br>MicroData<br>RDFa<br>Web Accessibility<br>WCAG<br>Role Attribute<br>WAI-ARIA<br>性能<br>JSPerf<br>YSlow 35 rules<br>PageSpeed<br>HTTPWatch<br>DynaTrace’s Ajax<br>高性能JavaScript<br>SEO<br>编程知识储备<br>数据结构<br>OOP/AOP<br>原型链/作用域链<br>闭包<br>编程范型<br>设计模式<br>Javascript Tips<br>部署流程<br>压缩合并<br>YUI Compressor<br>Google Clousure Complier<br>UglifyJS<br>CleanCSS<br>文档输出<br>JSDoc<br>Dox/Doxmate/Grunt-Doxmate<br>项目构建工具<br>make/Ant<br>GYP<br>Grunt<br>Gulp<br>Yeoman<br>FIS<br>Mod<br>ES6＋ 转换器<br>Traceur<br>Babel<br>代码组织<br>类库模块化<br>CommonJS/AMD<br>YUI3模块<br>webpack<br>业务逻辑模块化<br>bower/component<br>文件加载<br>LABjs<br>SeaJS/Require.js<br>模块化预处理器<br>Browserify<br>安全<br>CSRF/XSS<br>CSP<br>Same-origin policy<br>ADsafe/Caja/Sandbox<br>移动Web<br>HTML5/CSS3<br>响应式网页设计<br>Zeptojs/iScroll<br>V5/Sencha Touch<br>PhoneGap<br>jQuery Mobile<br>W3C Mobile Web Initiative<br>W3C mobileOK Checker<br>Open Mobile Alliance<br>React Native<br>前沿技术社区/会议<br>D2/WebRebuild<br>NodeParty/W3CTech/HTML5梦工厂<br>JSConf/沪JS(JSConf.cn)<br>QCon/Velocity/SDCC<br>JSConf/NodeConf<br>CSSConf<br>YDN/YUIConf<br>HybridApp<br>WHATWG<br>MDN<br>codepen<br>w3cplus<br>CNode<br>计算机知识储备<br>编译原理<br>计算机网络<br>操作系统<br>算法原理<br>软件工程/软件测试原理<br>Unicode<br>软技能<br>知识管理/总结分享<br>沟通技巧/团队协作<br>需求管理/PM<br>交互设计/可用性/可访问性知识<br>可视化<br>SVG/Canvas/VML<br>SVG: D3/Raphaël/Snap.svg/DataV<br>Canvas: CreateJS/KineticJS<br>WebGL/Three.JS<br>后端工程师</p><p>编程语言<br>C/C++/Java/PHP/Ruby/Python/…<br>网页服务器<br>Nginx<br>Apache<br>Lighttpd<br>数据库<br>SQL<br>MySQL/PostgreSQL/Oracle/DB2<br>MongoDB/CouchDB<br>数据缓存<br>Redis<br>Memcached<br>文件缓存/代理<br>Varnish<br>Squid<br>操作系统<br>Unix/Linux/OS X/Windows<br>数据结构<br>前端书籍推荐</p><p>★越少越简单,越适合入门,★多的要么是难度比较高,要么是比较适合在后面看,比如讲性能之类的书.</p><p>CSS</p><p>Eric Meyer 谈 CSS（卷二）★★★<br>CSS权威指南 （第3版）★★<br>精通CSS★★★<br>HTML &amp; CSS设计与构建网站★<br>JavaScript</p><p>JavaScript &amp; jQuery交互式Web前端开发★<br>JavaScript DOM编程艺术 （第2版）★<br>JavaScript高级程序设计（第3版）★★<br>锋利的jQuery★★<br>高性能JavaScript★★★<br>JavaScript语言精粹★★★<br>JavaScript权威指南★★★<br>编写可维护的JavaScript★★★<br>JAVASCRIPT语言精髓与编程实践★★★<br>Effective Javascript★★★<br>Secrets of the JavaScript Ninja★★★<br>JavaScript模式★★★<br>JavaScript设计模式★★★★<br>基于MVC的JavaScript Web富应用开发★★★<br>性能实践</p><p>高性能网站建设指南★<br>高性能网站建设进阶指南★★<br>Web性能实践日志★★★<br>Web性能权威指南★★★<br>版本控制工具</p><p>版本控制之道 (git)★★<br>Pro Git★★★<br>Git权威指南★★★★<br>后端书籍推荐</p><p>Linux管理</p><p>Linux 系统管理技术手册<br>鸟哥的 Linux 私房菜<br>Linux 101 Hacks<br>UNIX Shell Scripting<br>The Linux Command Line<br>Linux Network Administrator’s Guide<br>Linux编程</p><p>Linux程序设计<br>Linux系统编程<br>Unix环境高级编程<br>Unix编程艺术<br>The Linux Programming Interface<br>程序员的自我修养<br>深入理解Linux内核<br>Unix网络编程<br>TCP/IP高级编程<br>C/C++</p><p>Linux C编程一站式学习<br>C和指针<br>C陷阱与缺陷<br>C专家编程<br>C语言核心技术<br>彻底搞定C指针<br>征服C指针<br>C++编程思想<br>高质量程序设计指南—C/C++语言<br>Inside the C++ Object Model<br>A Tour of C++<br>The C++ Programming Language<br>The C++ Standard Library - A Tutorial and Reference<br>The C++ Standard (INCITS/ISO/IEC 14882-2011)<br>Overview of the New C++<br>前端工作面试</p><p>前端工作面试问题<br>前端开发面试题（中文）</p><p>前端指南 [read]<br>成为 Web 开发者 [read]<br>Isobar 前端代码标准 [read]<br>Web 基本原理 [read]<br>前端课程 [read]<br>freeCodeCamp [interact]<br>Planing a Front-end JS Application [watch]<br>So, You Want to be a Front-end Engineer [watch]<br>Front End Web Development Career Kickstart [watch][$]<br>前端 Web 开发入门 [watch][$]<br>Front-End Web Development Quick Start With HTML5, CSS, and JavaScript [watch][$]<br>Web 开发介绍 [watch][$]<br>前端 Web 开发基本原理 [watch][$]<br>Lean Front-End Engineering [watch][$]<br>A Baseline for Front-End [JS] Developers: 2015 [read]<br>了解前端 Web 开发 [watch][$]<br>前端开发精通 [watch][$]<br>没有学位的前端 Web 开发者 [watch][$]<br>译者补充:<br>成为一名优秀的Web前端开发者<br>What makes a good front end engineer?<br>How to become a web developer</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发知识结构&lt;/p&gt;
&lt;p&gt;前端工程师&lt;/p&gt;
&lt;p&gt;浏览器&lt;br&gt;IE6/7/8/9/10/11 (Trident)&lt;br&gt;Firefox (Gecko)&lt;br&gt;Chrome/Chromium (Blink)&lt;br&gt;Safari (WebKit)&lt;br&gt;Opera (Blink)&lt;br&gt;编程语言&lt;br&gt;JavaScript/Node.js&lt;br&gt;CoffeeScript&lt;br&gt;TypeScript&lt;br&gt;切页面&lt;br&gt;HTML/HTML5&lt;br&gt;CSS/CSS3&lt;br&gt;Sass/LESS/Stylus/postCSS&lt;br&gt;PhotoShop/Paint.net/Fireworks/GIMP/Sketch&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>前端知识体系</title>
    <link href="https://wuwb.github.io/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html"/>
    <id>https://wuwb.github.io/前端知识体系.html</id>
    <published>2016-07-17T04:57:35.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>布局框架：<br>Bootstrap: <a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a><br>Foundation: <a href="http://foundation.zurb.com/" target="_blank" rel="noopener">http://foundation.zurb.com/</a><br>Uikit: <a href="http://www.getuikit.com/" target="_blank" rel="noopener">http://www.getuikit.com/</a><br>Web Components:<a href="http://css-tricks.com/modular-future-web-components//" target="_blank" rel="noopener">http://css-tricks.com/modular-future-web-components//</a></p></li><li><p>构建工具及包管理器：<br>Grunt: <a href="http://gruntjs.com/" target="_blank" rel="noopener">http://gruntjs.com/</a><br>Yeoman: <a href="http://yeoman.io/" target="_blank" rel="noopener">http://yeoman.io/</a><br>Bower: <a href="http://bower.io/" target="_blank" rel="noopener">http://bower.io/</a><br>NPM: <a href="https://www.npmjs.org/" target="_blank" rel="noopener">https://www.npmjs.org/</a></p></li></ol><a id="more"></a><ol start="3"><li><p>代码优化：<br>Google Closure Compiler:<br>CSS Lint: <a href="http://csslint.net/" target="_blank" rel="noopener">http://csslint.net/</a><br>JSHint: <a href="http://www.jshint.com/" target="_blank" rel="noopener">http://www.jshint.com/</a><br>JSLint: <a href="http://www.jslint.com/" target="_blank" rel="noopener">http://www.jslint.com/</a></p></li><li><p>CSS预处理器<br>Less: <a href="http://lesscss.org/" target="_blank" rel="noopener">http://lesscss.org/</a><br>Sass: <a href="http://sass-lang.com/" target="_blank" rel="noopener">http://sass-lang.com/</a></p></li><li><p>调试工具：<br>Chrome：<a href="https://developers.google.com/chrome-developer-tools/" target="_blank" rel="noopener">https://developers.google.com/chrome-developer-tools/</a><br>Firebug: <a href="https://getfirebug.com/" target="_blank" rel="noopener">https://getfirebug.com/</a><br>HTTPWatch: <a href="http://www.httpwatch.com/" target="_blank" rel="noopener">http://www.httpwatch.com/</a><br>Fiddler: <a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">http://www.telerik.com/fiddler</a><br>IE Developer Toolbar:<br>Weinre: <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html</a></p></li><li><p>文档工具：<br>JSDoc: <a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="noopener">https://github.com/jsdoc3/jsdoc</a><br>Jekyll: <a href="http://jekyllrb.com/" target="_blank" rel="noopener">http://jekyllrb.com/</a></p></li><li><p>IDE/文本编辑器<br>WebStorm: <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">http://www.jetbrains.com/webstorm/</a></p></li><li><p>移动端 手势事件库：<br>GMU: <a href="http://gmu.baidu.com/" target="_blank" rel="noopener">http://gmu.baidu.com/</a><br>Hammer.js:&lt; <a href="http://eightmedia.github.io/hammer.js/&gt;" target="_blank" rel="noopener">http://eightmedia.github.io/hammer.js/&gt;</a><br>QuoJS: <a href="http://quojs.tapquo.com/" target="_blank" rel="noopener">http://quojs.tapquo.com/</a><br>Zepto: <a href="http://zeptojs.com/" target="_blank" rel="noopener">http://zeptojs.com/</a><br>Swipe: <a href="http://swipejs.com/" target="_blank" rel="noopener">http://swipejs.com/</a><br>jQuery Mobile: <a href="http://jquerymobile.com/" target="_blank" rel="noopener">http://jquerymobile.com/</a><br>KendoUI:<a href="http://www.telerik.com/kendo-ui" target="_blank" rel="noopener">http://www.telerik.com/kendo-ui</a><br>Goratchet:<a href="http://goratchet.com/" target="_blank" rel="noopener">http://goratchet.com/</a></p></li><li><p>思维导图<br>XMind:<a href="http://www.xmind.net/" target="_blank" rel="noopener">http://www.xmind.net/</a></p></li></ol><p>10.模块加载器：<br>ESL:&lt; <a href="https://github.com/ecomfe/esl&gt;" target="_blank" rel="noopener">https://github.com/ecomfe/esl&gt;</a><br>RequireJS: <a href="http://requirejs.org/" target="_blank" rel="noopener">http://requirejs.org/</a><br>SeaJS:<a href="http://seajs.org/docs/" target="_blank" rel="noopener">http://seajs.org/docs/</a></p><ol start="11"><li><p>项目管理:<br>Github: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>GitLab: <a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a><br>Redmine: <a href="http://www.redmine.org/" target="_blank" rel="noopener">http://www.redmine.org/</a></p></li><li><p>原型设计:<br>Axure RP: <a href="http://www.axure.com/" target="_blank" rel="noopener">http://www.axure.com/</a></p></li><li><p>富互联网应用框架<br>AngularJs: <a href="http://www.angularjs.org" target="_blank" rel="noopener">http://www.angularjs.org</a><br>Backbone: <a href="http://backbonejs.org/" target="_blank" rel="noopener">http://backbonejs.org/</a><br>AmpersandJS<a href="http://ampersandjs.com//" target="_blank" rel="noopener">http://ampersandjs.com//</a><br>Knockout: <a href="http://knockoutjs.com/" target="_blank" rel="noopener">http://knockoutjs.com/</a><br>Underscore: <a href="http://underscorejs.org/" target="_blank" rel="noopener">http://underscorejs.org/</a></p></li><li><p>模板引擎<br>EJS: <a href="http://www.embeddedjs.com/" target="_blank" rel="noopener">http://www.embeddedjs.com/</a><br>Handlebars: <a href="http://handlebarsjs.com/" target="_blank" rel="noopener">http://handlebarsjs.com/</a><br>Jade: <a href="http://jade-lang.com/" target="_blank" rel="noopener">http://jade-lang.com/</a><br>Velocity: <a href="http://velocity.apache.org/" target="_blank" rel="noopener">http://velocity.apache.org/</a></p></li><li><p>测试框架<br>Jasmine: <a href="http://pivotal.github.io/jasmine/" target="_blank" rel="noopener">http://pivotal.github.io/jasmine/</a><br>QUnit: <a href="http://qunitjs.com/" target="_blank" rel="noopener">http://qunitjs.com/</a><br>mocha: <a href="http://visionmedia.github.io/mocha/" target="_blank" rel="noopener">http://visionmedia.github.io/mocha/</a><br>selenium<br>webDriverIo<br>Protractor<br>Chai<br>SinonJS<br>nodeunit<br>tape<br>speckjs</p></li></ol><p>sauce labs<br>browser stack<br>Browser Shots<br>Browserling<br>Browser Sandbox<br>Cross Browser Testing<br>Browserta<br>SortSite</p><ol start="16"><li><p>版本控制<br>Git: <a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a><br>Subversion: <a href="http://subversion.apache.org/" target="_blank" rel="noopener">http://subversion.apache.org/</a><br>Mercurial(Hg): <a href="http://mercurial.selenic.com/" target="_blank" rel="noopener">http://mercurial.selenic.com/</a></p></li><li><p>WEB框架/服务器<br>Node: <a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a><br>Express: <a href="http://expressjs.com/" target="_blank" rel="noopener">http://expressjs.com/</a><br>Apache: <a href="http://httpd.apache.org/" target="_blank" rel="noopener">http://httpd.apache.org/</a><br>Nginx: <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></p></li><li><p>CommonJS<br>Component: <a href="http://component.io/" target="_blank" rel="noopener">http://component.io/</a></p></li><li><p>WEB安全<br>XSS(跨站脚本攻击):<br>CSRF(跨站点伪造请求攻击):<br>跨iframe攻击:<br>Clickjacking安全漏洞:</p></li><li><p>代码规范<br>Code Guide: <a href="http://alloyteam.github.io/code-guide/" target="_blank" rel="noopener">http://alloyteam.github.io/code-guide/</a><br>编写可维护的CSS: <a href="http://segmentfault.com/a/1190000000388784/" target="_blank" rel="noopener">http://segmentfault.com/a/1190000000388784/</a><br>GJS编码规范指南: <a href="http://alloyteam.github.io/JX/doc/specification/google-javascript.xml" target="_blank" rel="noopener">http://alloyteam.github.io/JX/doc/specification/google-javascript.xml</a><br>jQueryJS规范: <a href="http://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener">http://contribute.jquery.org/style-guide/js/</a></p></li><li><p>HTML模块化<br>html5boilerplate: <a href="http://html5boilerplate.com/" target="_blank" rel="noopener">http://html5boilerplate.com/</a></p></li><li><p>CSS模块化<br>Normalize.css: <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a><br>LESS:<a href="http://www.lesscss.net/" target="_blank" rel="noopener">http://www.lesscss.net/</a><br>OOCSS:<a href="http://www.oocss.cc/" target="_blank" rel="noopener">http://www.oocss.cc/</a> <a href="http://oocss.org/" target="_blank" rel="noopener">http://oocss.org/</a><br>CssReset:<a href="http://www.cssreset.com/" target="_blank" rel="noopener">http://www.cssreset.com/</a></p></li><li><p>HTML5 Canvas<br>D3:<a href="http://d3js.org/" target="_blank" rel="noopener">http://d3js.org/</a><br>KINETIC:<a href="http://kineticjs.com/" target="_blank" rel="noopener">http://kineticjs.com/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;布局框架：&lt;br&gt;Bootstrap: &lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://getbootstrap.com/&lt;/a&gt;&lt;br&gt;Foundation: &lt;a href=&quot;http://foundation.zurb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://foundation.zurb.com/&lt;/a&gt;&lt;br&gt;Uikit: &lt;a href=&quot;http://www.getuikit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.getuikit.com/&lt;/a&gt;&lt;br&gt;Web Components:&lt;a href=&quot;http://css-tricks.com/modular-future-web-components//&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://css-tricks.com/modular-future-web-components//&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建工具及包管理器：&lt;br&gt;Grunt: &lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://gruntjs.com/&lt;/a&gt;&lt;br&gt;Yeoman: &lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://yeoman.io/&lt;/a&gt;&lt;br&gt;Bower: &lt;a href=&quot;http://bower.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bower.io/&lt;/a&gt;&lt;br&gt;NPM: &lt;a href=&quot;https://www.npmjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>权限系统设计</title>
    <link href="https://wuwb.github.io/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://wuwb.github.io/权限系统设计.html</id>
    <published>2016-06-29T03:47:47.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://developer.51cto.com/art/201409/450356.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/201409/450356.htm</a><br><a href="http://aiilive.blog.51cto.com/1925756/1297317" target="_blank" rel="noopener">http://aiilive.blog.51cto.com/1925756/1297317</a><br><a href="http://vitrum.github.io/" target="_blank" rel="noopener">http://vitrum.github.io/</a><br><a href="http://www.php1.cn/Content/node-js_KaiFaZhi_RBAC_YongHuJiaoSeQuanXianSheJiFangAn.html" target="_blank" rel="noopener">http://www.php1.cn/Content/node-js_KaiFaZhi_RBAC_YongHuJiaoSeQuanXianSheJiFangAn.html</a><br><a href="http://vitrum.github.io/2015/08/03/Nodejs%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">http://vitrum.github.io/2015/08/03/Nodejs%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://developer.51cto.com/art/201409/450356.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://developer.51cto.com/art/201409/450356.ht
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="rbac" scheme="https://wuwb.github.io/tags/rbac/"/>
    
  </entry>
  
  <entry>
    <title>[译]自由职业者业务增长指南</title>
    <link href="https://wuwb.github.io/%E8%87%AA%E7%94%B1%E8%81%8C%E4%B8%9A%E8%80%85%E4%B8%9A%E5%8A%A1%E5%A2%9E%E9%95%BF%E6%8C%87%E5%8D%97.html"/>
    <id>https://wuwb.github.io/自由职业者业务增长指南.html</id>
    <published>2016-06-28T14:39:47.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>[这是一份来自 PJRVS 创始人 Paul Jarvis 的特约稿 – Noah]</p><p>大多数自由职业者是这样开始他们的业务的：</p><p>1.提高自己的职业技能。<br>2.建立一个描述自己的经验的网站。<br>3.建立自己的社会媒体形象，并向别人推广。<br>4.等待客户来找他们。</p><p>更好的方法是：</p><p>投入到你最想要的客户</p><p>建一个列表，列出那些曾经雇佣过和有你一样技能的自由职业者并且最近也雇佣过这些人的人。给他们写一封简单的邮件看他们能不能提供一些建议。</p><p>不知道要问哪些人？看看那些成功的自由职业者的网站，去找他们的客户列表。那是一群雇佣过像你一样的自由职业者的人。不要试图去偷挖别人的客户，你只需要问他们一些问题。</p><p>问他们这几个问题：</p><ul><li>为什么他们雇佣这些特定的自由职业者？</li><li>他们是怎么找到这些自由职业者的?</li><li>是什么问题让他们想到雇佣自由职业者?</li><li>通过雇佣自由职业者他们希望得到怎样的结果？</li></ul><h3 id="来源">来源<a href="自由职业者业务增长指南#来源"></a></h3><p>-[A (Proven) Freelancer’s Guide to Growing Your Business] (<a href="http://okdork.com/2014/07/22/actions-techniques-to-go-from-0-to-your-first-1k-with-freelancing/" target="_blank" rel="noopener">http://okdork.com/2014/07/22/actions-techniques-to-go-from-0-to-your-first-1k-with-freelancing/</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[这是一份来自 PJRVS 创始人 Paul Jarvis 的特约稿 – Noah]&lt;/p&gt;
&lt;p&gt;大多数自由职业者是这样开始他们的业务的：&lt;/p&gt;
&lt;p&gt;1.提高自己的职业技能。&lt;br&gt;2.建立一个描述自己的经验的网站。&lt;br&gt;3.建立自己的社会媒体形象，并向别人推广。&lt;
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="freelancer" scheme="https://wuwb.github.io/tags/freelancer/"/>
    
  </entry>
  
  <entry>
    <title>what_are_the_difference_between_ddl_dml_and_dcl_commands</title>
    <link href="https://wuwb.github.io/what-are-the-difference-between-ddl-dml-and-dcl-commands.html"/>
    <id>https://wuwb.github.io/what-are-the-difference-between-ddl-dml-and-dcl-commands.html</id>
    <published>2016-06-12T02:57:34.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>数据库一直在用，但一直没有系统学习过，只会建建表，做些增删改查。</p><h3 id="reference">reference<a href="what-are-the-difference-between-ddl-dml-and-dcl-commands#reference"></a></h3><ul><li><a href="http://www.tomjewett.com/dbdesign/dbdesign.php?page=ddldml.php" target="_blank" rel="noopener"></a></li><li><a href="http://stackoverflow.com/questions/2578194/what-is-ddl-and-dml" target="_blank" rel="noopener">what-is-ddl-and-dml</a></li><li><a href="http://www.orafaq.com/faq/what_are_the_difference_between_ddl_dml_and_dcl_commands" target="_blank" rel="noopener">what_are_the_difference_between_ddl_dml_and_dcl_commands</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库一直在用，但一直没有系统学习过，只会建建表，做些增删改查。&lt;/p&gt;
&lt;h3 id=&quot;reference&quot;&gt;reference&lt;a href=&quot;what-are-the-difference-between-ddl-dml-and-dcl-commands#refere
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>centos 安装 nodejs</title>
    <link href="https://wuwb.github.io/centos-install-nodejs.html"/>
    <id>https://wuwb.github.io/centos-install-nodejs.html</id>
    <published>2016-04-07T13:06:12.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reference">reference<a href="centos-install-nodejs#reference"></a></h3><ul><li><a href="http://www.jianshu.com/p/783906f10d58" target="_blank" rel="noopener">http://www.jianshu.com/p/783906f10d58</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reference&quot;&gt;reference&lt;a href=&quot;centos-install-nodejs#reference&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/783906f10d58&quot; targ
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>centos6.5 安装 git</title>
    <link href="https://wuwb.github.io/centos6-5-%E5%AE%89%E8%A3%85-git.html"/>
    <id>https://wuwb.github.io/centos6-5-安装-git.html</id>
    <published>2016-04-07T08:00:51.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-a-centos-6-4-vps" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-git-on-a-centos-6-4-vps</a></li><li><a href="http://blog.sciencenet.cn/blog-728999-846435.html" target="_blank" rel="noopener">http://blog.sciencenet.cn/blog-728999-846435.html</a></li><li><a href="http://stackoverflow.com/questions/8329485/git-clone-fatal-unable-to-find-remote-helper-for-https" target="_blank" rel="noopener">http://stackoverflow.com/questions/8329485/git-clone-fatal-unable-to-find-remote-helper-for-https</a></li><li><a href="http://dqn.sakusakutto.jp/2013/06/git_fatal_unable_to_find_remote_helper_for_https.html" target="_blank" rel="noopener">http://dqn.sakusakutto.jp/2013/06/git_fatal_unable_to_find_remote_helper_for_https.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-git-on-a-centos-6-4-vps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ht
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>前端常用</title>
    <link href="https://wuwb.github.io/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8.html"/>
    <id>https://wuwb.github.io/前端常用.html</id>
    <published>2016-04-07T05:44:52.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<ol><li>布局框架：<br>Bootstrap: <a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a></li></ol><p>Foundation: <a href="http://foundation.zurb.com/" target="_blank" rel="noopener">http://foundation.zurb.com/</a></p><p>Uikit: <a href="http://www.getuikit.com/" target="_blank" rel="noopener">http://www.getuikit.com/</a></p><p>Web Components:<a href="http://css-tricks.com/modular-future-web-components//" target="_blank" rel="noopener">http://css-tricks.com/modular-future-web-components//</a></p><ol start="2"><li>构建工具及包管理器：<br>Grunt: <a href="http://gruntjs.com/" target="_blank" rel="noopener">http://gruntjs.com/</a></li></ol><p>Yeoman: <a href="http://yeoman.io/" target="_blank" rel="noopener">http://yeoman.io/</a></p><p>Bower: <a href="http://bower.io/" target="_blank" rel="noopener">http://bower.io/</a></p><p>NPM: <a href="https://www.npmjs.org/" target="_blank" rel="noopener">https://www.npmjs.org/</a></p><ol start="3"><li>代码优化：<br>Google Closure Compiler:</li></ol><p>CSS Lint: <a href="http://csslint.net/" target="_blank" rel="noopener">http://csslint.net/</a></p><p>JSHint: <a href="http://www.jshint.com/" target="_blank" rel="noopener">http://www.jshint.com/</a></p><p>JSLint: <a href="http://www.jslint.com/" target="_blank" rel="noopener">http://www.jslint.com/</a></p><ol start="4"><li>CSS预处理器<br>Less: <a href="http://lesscss.org/" target="_blank" rel="noopener">http://lesscss.org/</a></li></ol><p>Sass: <a href="http://sass-lang.com/" target="_blank" rel="noopener">http://sass-lang.com/</a></p><ol start="5"><li>调试工具：<br>Chrome：<a href="https://developers.google.com/chrome-developer-tools/" target="_blank" rel="noopener">https://developers.google.com/chrome-developer-tools/</a></li></ol><p>Firebug: <a href="https://getfirebug.com/" target="_blank" rel="noopener">https://getfirebug.com/</a></p><p>HTTPWatch: <a href="http://www.httpwatch.com/" target="_blank" rel="noopener">http://www.httpwatch.com/</a></p><p>Fiddler: <a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">http://www.telerik.com/fiddler</a></p><p>IE Developer Toolbar:</p><p>Weinre: <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html</a></p><ol start="6"><li>文档工具：<br>JSDoc: <a href="https://github.com/jsdoc3/jsdoc" target="_blank" rel="noopener">https://github.com/jsdoc3/jsdoc</a></li></ol><p>Jekyll: <a href="http://jekyllrb.com/" target="_blank" rel="noopener">http://jekyllrb.com/</a></p><ol start="7"><li><p>IDE/文本编辑器<br>WebStorm: <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">http://www.jetbrains.com/webstorm/</a></p></li><li><p>移动端 手势事件库：<br>GMU: <a href="http://gmu.baidu.com/" target="_blank" rel="noopener">http://gmu.baidu.com/</a></p></li></ol><p>Hammer.js:&lt; <a href="http://eightmedia.github.io/hammer.js/&gt;" target="_blank" rel="noopener">http://eightmedia.github.io/hammer.js/&gt;</a></p><p>QuoJS: <a href="http://quojs.tapquo.com/" target="_blank" rel="noopener">http://quojs.tapquo.com/</a></p><p>Zepto: <a href="http://zeptojs.com/" target="_blank" rel="noopener">http://zeptojs.com/</a></p><p>Swipe: <a href="http://swipejs.com/" target="_blank" rel="noopener">http://swipejs.com/</a></p><p>jQuery Mobile: <a href="http://jquerymobile.com/" target="_blank" rel="noopener">http://jquerymobile.com/</a></p><p>KendoUI:<a href="http://www.telerik.com/kendo-ui" target="_blank" rel="noopener">http://www.telerik.com/kendo-ui</a></p><p>Goratchet:<a href="http://goratchet.com/" target="_blank" rel="noopener">http://goratchet.com/</a></p><ol start="9"><li>思维导图<br>XMind:<a href="http://www.xmind.net/" target="_blank" rel="noopener">http://www.xmind.net/</a></li></ol><p>10.模块加载器：<br>ESL:&lt; <a href="https://github.com/ecomfe/esl&gt;" target="_blank" rel="noopener">https://github.com/ecomfe/esl&gt;</a></p><p>RequireJS: <a href="http://requirejs.org/" target="_blank" rel="noopener">http://requirejs.org/</a></p><p>SeaJS:<a href="http://seajs.org/docs/" target="_blank" rel="noopener">http://seajs.org/docs/</a></p><ol start="11"><li>项目管理:<br>Github: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li></ol><p>GitLab: <a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a></p><p>Redmine: <a href="http://www.redmine.org/" target="_blank" rel="noopener">http://www.redmine.org/</a></p><ol start="12"><li><p>原型设计:<br>Axure RP: <a href="http://www.axure.com/" target="_blank" rel="noopener">http://www.axure.com/</a></p></li><li><p>富互联网应用框架<br>AngularJs: <a href="http://www.angularjs.org" target="_blank" rel="noopener">http://www.angularjs.org</a></p></li></ol><p>Backbone: <a href="http://backbonejs.org/" target="_blank" rel="noopener">http://backbonejs.org/</a></p><p>AmpersandJS<a href="http://ampersandjs.com//" target="_blank" rel="noopener">http://ampersandjs.com//</a></p><p>Knockout: <a href="http://knockoutjs.com/" target="_blank" rel="noopener">http://knockoutjs.com/</a></p><p>Underscore: <a href="http://underscorejs.org/" target="_blank" rel="noopener">http://underscorejs.org/</a></p><ol start="14"><li>模板引擎<br>EJS: <a href="http://www.embeddedjs.com/" target="_blank" rel="noopener">http://www.embeddedjs.com/</a></li></ol><p>Handlebars: <a href="http://handlebarsjs.com/" target="_blank" rel="noopener">http://handlebarsjs.com/</a></p><p>Jade: <a href="http://jade-lang.com/" target="_blank" rel="noopener">http://jade-lang.com/</a></p><p>Velocity: <a href="http://velocity.apache.org/" target="_blank" rel="noopener">http://velocity.apache.org/</a></p><ol start="15"><li>测试框架<br>Jasmine: <a href="http://pivotal.github.io/jasmine/" target="_blank" rel="noopener">http://pivotal.github.io/jasmine/</a></li></ol><p>QUnit: <a href="http://qunitjs.com/" target="_blank" rel="noopener">http://qunitjs.com/</a></p><p>mocha: <a href="http://visionmedia.github.io/mocha/" target="_blank" rel="noopener">http://visionmedia.github.io/mocha/</a></p><ol start="16"><li>版本控制<br>Git: <a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a></li></ol><p>Subversion: <a href="http://subversion.apache.org/" target="_blank" rel="noopener">http://subversion.apache.org/</a></p><p>Mercurial(Hg): <a href="http://mercurial.selenic.com/" target="_blank" rel="noopener">http://mercurial.selenic.com/</a></p><ol start="17"><li>WEB框架/服务器<br>Node: <a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a></li></ol><p>Express: <a href="http://expressjs.com/" target="_blank" rel="noopener">http://expressjs.com/</a></p><p>Apache: <a href="http://httpd.apache.org/" target="_blank" rel="noopener">http://httpd.apache.org/</a></p><p>Nginx: <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></p><ol start="18"><li><p>CommonJS<br>Component: <a href="http://component.io/" target="_blank" rel="noopener">http://component.io/</a></p></li><li><p>WEB安全<br>XSS(跨站脚本攻击):</p></li></ol><p>CSRF(跨站点伪造请求攻击):</p><p>跨iframe攻击:</p><p>Clickjacking安全漏洞:</p><ol start="20"><li>代码规范<br>Code Guide: <a href="http://alloyteam.github.io/code-guide/" target="_blank" rel="noopener">http://alloyteam.github.io/code-guide/</a></li></ol><p>编写可维护的CSS: <a href="http://segmentfault.com/a/1190000000388784/" target="_blank" rel="noopener">http://segmentfault.com/a/1190000000388784/</a></p><p>GJS编码规范指南: <a href="http://alloyteam.github.io/JX/doc/specification/google-javascript.xml" target="_blank" rel="noopener">http://alloyteam.github.io/JX/doc/specification/google-javascript.xml</a></p><p>jQueryJS规范: <a href="http://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener">http://contribute.jquery.org/style-guide/js/</a></p><ol start="21"><li><p>HTML模块化<br>html5boilerplate: <a href="http://html5boilerplate.com/" target="_blank" rel="noopener">http://html5boilerplate.com/</a></p></li><li><p>CSS模块化<br>Normalize.css: <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p></li></ol><p>LESS:<a href="http://www.lesscss.net/" target="_blank" rel="noopener">http://www.lesscss.net/</a></p><p>OOCSS:<a href="http://www.oocss.cc/" target="_blank" rel="noopener">http://www.oocss.cc/</a> <a href="http://oocss.org/" target="_blank" rel="noopener">http://oocss.org/</a></p><p>CssReset:<a href="http://www.cssreset.com/" target="_blank" rel="noopener">http://www.cssreset.com/</a></p><ol start="23"><li>HTML5 Canvas<br>D3:<a href="http://d3js.org/" target="_blank" rel="noopener">http://d3js.org/</a></li></ol><p>KINETIC:<a href="http://kineticjs.com/" target="_blank" rel="noopener">http://kineticjs.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;布局框架：&lt;br&gt;Bootstrap: &lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://getbootstrap.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fo
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>centos 安装 nginx</title>
    <link href="https://wuwb.github.io/centos-install-nginx.html"/>
    <id>https://wuwb.github.io/centos-install-nginx.html</id>
    <published>2016-04-07T05:44:52.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>第一步，在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/</span><br><span class="line">vim nginx.repo</span><br></pre></td></tr></table></div></figure><p>填写如下内容：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line"><span class="attr">name</span>=nginx repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></div></figure><p>保存，则会产生一个/etc/yum.repos.d/nginx.repo文件。</p><p>下面直接执行如下指令即可自动安装好Nginx：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx -y</span><br></pre></td></tr></table></div></figure><p>安装完成，下面直接就可以启动Nginx了：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx start</span></span><br></pre></td></tr></table></div></figure><p>现在Nginx已经启动了，直接访问服务器就能看到Nginx欢迎页面了的。</p><p>如果还无法访问，则需配置一下Linux防火墙。</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></div></figure><p>Nginx的命令以及配置文件位置：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/etc/</span>init.d/nginx start <span class="meta"># 启动Nginx服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/nginx stop <span class="meta"># 停止Nginx服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>nginx/nginx.conf <span class="meta"># Nginx配置文件位置</span></span><br></pre></td></tr></table></div></figure><p>至此，Nginx已经全部配置安装完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一步，在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Call to undefined function imagettftext 错误</title>
    <link href="https://wuwb.github.io/Call-to-undefined-function-imagettftext-%E9%94%99%E8%AF%AF.html"/>
    <id>https://wuwb.github.io/Call-to-undefined-function-imagettftext-错误.html</id>
    <published>2016-04-03T07:45:48.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">http:</span><span class="comment">//php-osx.liip.ch/install.sh | bash -s 5.5</span></span><br><span class="line">curl -s <span class="string">http:</span><span class="comment">//php-osx.liip.ch/install.sh | bash -s 5.6</span></span><br><span class="line">curl -s <span class="string">http:</span><span class="comment">//php-osx.liip.ch/install.sh | bash -s 7.0</span></span><br></pre></td></tr></table></div></figure><p>执行对应的脚本</p><p>可以通过phpinfo函数查看本机的php版本号再选择替换不迟</p><p>终端执行可能会很慢呀，无需开启vpn直接使用自家的宽带就可以更新了，我用的还是移动宽带哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql 连接报错</title>
    <link href="https://wuwb.github.io/mysql-%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99.html"/>
    <id>https://wuwb.github.io/mysql-连接报错.html</id>
    <published>2016-04-03T06:08:08.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>连接 mysql 的时候报了下面的错误：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Table</span> 'performance_schema.session_variables' doesn't <span class="comment">exist</span></span><br></pre></td></tr></table></div></figure><p>目前不是在研究 mysql 不准备深入了解是什么原因了。<br>猜测是 mysql 升级造成的</p><p>解决方法是执行</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mysql_upgrade -u root -p --force</span></span><br><span class="line"><span class="meta"># systemctl restart mysqld</span></span><br></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">Add</span> following into MySQL<span class="built_in"> config </span>file my.cf</span><br><span class="line"><span class="attribute">show_compatibility_56</span>=on</span><br></pre></td></tr></table></div></figure><h3 id="reference">reference<a href="mysql-连接报错#reference"></a></h3><p><a href="http://stackoverflow.com/questions/31967527/table-performance-schema-session-variables-doesnt-exist" target="_blank" rel="noopener">http://stackoverflow.com/questions/31967527/table-performance-schema-session-variables-doesnt-exist</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;连接 mysql 的时候报了下面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>常用 css lib</title>
    <link href="https://wuwb.github.io/%E5%B8%B8%E7%94%A8-css-lib.html"/>
    <id>https://wuwb.github.io/常用-css-lib.html</id>
    <published>2016-04-02T08:15:19.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3缓动库">CSS3缓动库<a href="常用-css-lib#CSS3缓动库"></a></h2><ul><li><a href="http://daneden.github.io/animate.css/" target="_blank" rel="noopener">淡入淡出</a></li><li><a href="http://elrumordelaluz.github.io/csshake/" target="_blank" rel="noopener">抖动</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS3缓动库&quot;&gt;CSS3缓动库&lt;a href=&quot;常用-css-lib#CSS3缓动库&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>contos 安装 python 3.3</title>
    <link href="https://wuwb.github.io/contos-%E5%AE%89%E8%A3%85-python-3-3.html"/>
    <id>https://wuwb.github.io/contos-安装-python-3-3.html</id>
    <published>2016-03-29T02:10:37.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>查看当前系统中的python版本</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></div></figure><p>安装所有的开发工具包</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall "Development tools"</span><br><span class="line">```shell</span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel</span><br></pre></td></tr></table></div></figure><p>下载、编译和安装Python<br>在官网下载python 3.3版本源码：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.python.org/ftp/python/3.3.0/Python-3.3.0.tar.bz2</span><br><span class="line">tar -jxv -f Python-3.3.0.tar.bz2</span><br><span class="line">cd Python-3.3.0</span><br><span class="line">./configure</span><br><span class="line">make install</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看当前系统中的python版本&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>pm2 入门</title>
    <link href="https://wuwb.github.io/pm2-%E5%85%A5%E9%97%A8.html"/>
    <id>https://wuwb.github.io/pm2-入门.html</id>
    <published>2016-03-26T07:09:48.000Z</published>
    <updated>2020-04-15T21:36:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>PM2 是一个自带负载均衡的 Node.js 应用的进程管理器。被普遍用户生产环境。</p><p>(美团网甚至在其上开发了增强版的 PM2.5，有兴趣的同学可以自行研究。)</p><h3 id="安装">安装<a href="pm2-入门#安装"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></div></figure><h3 id="常用命令">常用命令<a href="pm2-入门#常用命令"></a></h3><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js [-i 4]       # -i指定进程数，也可传递'-i max'</span><br><span class="line">pm2 start app.js --name app   # 命名启动进程</span><br><span class="line">pm2 list                      # 显示所有进程状态</span><br><span class="line">pm2 monit                     # 监视所有进程的资源使用状况</span><br><span class="line">pm2 logs                      # 显示所有进程日志</span><br><span class="line">pm2 stop [all | name | id]    # 停止全部或者指定name或id的进程</span><br><span class="line">pm2 restart [all | name | id] # 重启全部或者指定name或id的进程</span><br><span class="line">pm2 reload [all | name |id]   # 0秒停机重载进程</span><br><span class="line">pm2 delete [all | name |id]   # 删除全部或者指定name或id的进程</span><br></pre></td></tr></table></div></figure><h3 id="日志管理">日志管理<a href="pm2-入门#日志管理"></a></h3><p>pm2会接管项目日志默认存放于用户目录下: <strong>~/.pm2/logs/</strong></p><p>日志文件明构成：</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误日志：&#123;appName&#125;-error-&#123;id&#125;.log</span><br><span class="line">其他日志：&#123;appName&#125;-out-&#123;id&#125;.log</span><br></pre></td></tr></table></div></figure><p>注意：使用 pm2 logs 可实时查看所有进程日志。</p><h4 id="日志切分">日志切分<a href="pm2-入门#日志切分"></a></h4><p>应用的日志应该由调度程序来控制，而不应该让应用自己来控制日志的切割存储等事情。<br>这样可以降低程序的复杂度，让程序专注于本身的业务逻辑。</p><p>pm2 为我们提供了一个 <a href="https://github.com/pm2-hive/pm2-logrotate" target="_blank" rel="noopener">pm2-logrotate</a> 插件来实现这些功能</p><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm2 install pm2-logrotate</span><br><span class="line">pm2 set pm2-logrotate:interval 1          # 默认为1，可以不设置</span><br><span class="line">pm2 set pm2-logrotate:interval_unit 'DD'  # 设置分文件的时间单位(默认天)，DD：天；MM：月；mm：分</span><br><span class="line">pm2 set pm2-logrotate:max_size 100M       # 设置分文件的大小单位(默认10MB)，接受G,M,K</span><br><span class="line">pm2 set pm2-logrotate:retain all          # 设置保存的日志数，超过将自动删除，接受 all | number</span><br></pre></td></tr></table></div></figure><h3 id="reference">reference<a href="pm2-入门#reference"></a></h3><ul><li><a href="http://tech.meituan.com/node-fullstack-development-practice.html" target="_blank" rel="noopener">美团酒店Node全栈开发实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PM2 是一个自带负载均衡的 Node.js 应用的进程管理器。被普遍用户生产环境。&lt;/p&gt;
&lt;p&gt;(美团网甚至在其上开发了增强版的 PM2.5，有兴趣的同学可以自行研究。)&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;安装&lt;a href=&quot;pm2-入门#安装&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;f
      
    
    </summary>
    
    
      <category term="其他" scheme="https://wuwb.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
